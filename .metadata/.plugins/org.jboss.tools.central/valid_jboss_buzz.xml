<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Keycloak 4.3.0.Final Released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EPt_dIb-EKM/keycloak-430final-released.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><author><name>Stian Thorgersen</name></author><id>searchisko:content:id:jbossorg_blog-keycloak_4_3_0_final_released</id><updated>2018-08-16T10:14:09Z</updated><published>2018-08-16T10:14:00Z</published><content type="html">&lt;p&gt;To download the release go to the &lt;a href="http://www.keycloak.org/downloads"&gt;Keycloak homepage&lt;/a&gt;. &lt;p&gt;For details on what is included in the release check out the &lt;a href="https://www.keycloak.org/docs/latest/release_notes/index.html"&gt;Release notes&lt;/a&gt; &lt;p&gt;The full list of resolved issues is available in &lt;a href="https://issues.jboss.org/issues/?jql=project%20%3D%20keycloak%20and%20fixVersion%20%3D%204.3.0.Final"&gt;JIRA&lt;/a&gt;. &lt;p&gt;Before you upgrade remember to backup your database and check the &lt;a href="http://www.keycloak.org/docs/latest/upgrading/index.html"&gt;upgrade guide&lt;/a&gt; for anything that may have changed.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EPt_dIb-EKM" height="1" width="1" alt=""/&gt;</content><summary>To download the release go to the Keycloak homepage. For details on what is included in the release check out the Release notes The full list of resolved issues is available in JIRA. Before you upgrade remember to backup your database and check the upgrade guide for anything that may have changed.</summary><dc:creator>Stian Thorgersen</dc:creator><dc:date>2018-08-16T10:14:00Z</dc:date><feedburner:origLink>http://blog.keycloak.org/2018/08/keycloak-430final-released.html</feedburner:origLink></entry><entry><title>Announcing Thorntail 2.1.0.Final</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/10OsUYleYyA/announcing-thorntail-2-1-0-final" /><category term="feed_group_name_wildfly_swarm" scheme="searchisko:content:tags" /><category term="feed_name_wildfly_swarm" scheme="searchisko:content:tags" /><author><name>The Thornail Team</name></author><id>searchisko:content:id:jbossorg_blog-announcing_thorntail_2_1_0_final</id><updated>2018-08-16T05:00:00Z</updated><published>2018-08-16T05:00:00Z</published><content type="html">&lt;div class="sect1"&gt; &lt;h2 id="_thorntail_2_1_0_final"&gt;Thorntail 2.1.0.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;On this day in 1896 Gold was first discovered in Klondike, found at Bonanza Creek, Alaska by George Carmack.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;And now 122 years later, 2.1.0.Final is released!&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_what_s_new"&gt;What’s New?&lt;/h3&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;MicroProfile 1.3 with SmallRye&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Automated migration from WildFly Swarm&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;OpenTracing and Jaeger changes&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New JOSE fraction&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Old &lt;code&gt;config-api-runtime&lt;/code&gt; fixed&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Consul update&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/10OsUYleYyA" height="1" width="1" alt=""/&gt;</content><summary>Thorntail 2.1.0.Final On this day in 1896 Gold was first discovered in Klondike, found at Bonanza Creek, Alaska by George Carmack. And now 122 years later, 2.1.0.Final is released! What’s New? MicroProfile 1.3 with SmallRye Automated migration from WildFly Swarm OpenTracing and Jaeger changes New JOSE fraction Old config-api-runtime fixed Consul update</summary><dc:creator>The Thornail Team</dc:creator><dc:date>2018-08-16T05:00:00Z</dc:date><feedburner:origLink>https://wildfly-swarm.io/posts/announcing-thorntail-2-1-0-final</feedburner:origLink></entry><entry><title>How to enable sudo on RHEL</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/DLUzZOYzIq0/" /><category term="Red Hat Enterprise Linux" /><category term="RHEL" /><category term="Security" /><category term="sudo" /><category term="Sysadmin for Developers" /><author><name>Rob Terzi</name></author><id>https://developers.redhat.com/blog/?p=514117</id><updated>2018-08-15T17:23:53Z</updated><published>2018-08-15T17:23:53Z</published><content type="html">&lt;p&gt;You’ve probably seen tutorials that use &lt;code&gt;sudo&lt;/code&gt; for running administrative commands as root. However when you try it, you get told your user ID is “not in the sudoers file, this incident will be reported.”  For developers, &lt;code&gt;sudo&lt;/code&gt; can be very useful for running steps that require root access in build scripts.&lt;/p&gt; &lt;p&gt;This article covers:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How to configure &lt;code&gt;sudo&lt;/code&gt; access on &lt;a href="https://developers.redhat.com/products/rhel/overview/"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) so you won’t need to use &lt;code&gt;su&lt;/code&gt; and keep entering the root password&lt;/li&gt; &lt;li&gt;Configuring &lt;code&gt;sudo&lt;/code&gt; to not ask for your password&lt;/li&gt; &lt;li&gt;How to enable &lt;code&gt;sudo&lt;/code&gt; during system installation&lt;/li&gt; &lt;li&gt;Why &lt;code&gt;sudo&lt;/code&gt; seems to work out of the box for some users and not others&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span id="more-514117"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;TL;DR: Basic &lt;code&gt;sudo&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;To enable &lt;code&gt;sudo&lt;/code&gt; for your user ID on RHEL, add your user ID to the &lt;code&gt;wheel&lt;/code&gt; group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Become root by running&lt;code&gt;su&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Run &lt;code&gt;usermod -aG wheel &lt;em&gt;your_user_id&lt;/em&gt;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Log out and back in again&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Now you will be able to use &lt;code&gt;sudo&lt;/code&gt; when logged in under your normal user ID. You will be asked to enter the password for &lt;em&gt;your user ID&lt;/em&gt; when you run a &lt;code&gt;sudo&lt;/code&gt; command. For the next five minutes, &lt;code&gt;sudo&lt;/code&gt; will remember that you’ve been authenticated, so you won’t be asked for your password again.&lt;/p&gt; &lt;p&gt;This works because the default &lt;code&gt;/etc/sudoers&lt;/code&gt; file on RHEL contains the following line:&lt;/p&gt; &lt;pre&gt;%wheel ALL=(ALL) ALL&lt;/pre&gt; &lt;p&gt;That line enables all users in group &lt;code&gt;wheel&lt;/code&gt; to run any command with &lt;code&gt;sudo&lt;/code&gt;, but users will be asked to prove their identity with their password.  Note: there is no comment symbol (&lt;code&gt;#&lt;/code&gt;) in front of that line.&lt;/p&gt; &lt;p&gt;After logging out and back in again, you can verify that you are in group &lt;code&gt;wheel&lt;/code&gt; by running the &lt;code&gt;id&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ id uid=1000(rct) gid=10(wheel) groups=10(wheel),1000(rct) &lt;/pre&gt; &lt;h2&gt;Using &lt;code&gt;sudo&lt;/code&gt; without a password&lt;/h2&gt; &lt;p&gt;You can also configure &lt;code&gt;sudo&lt;/code&gt; to not ask for a password to verify your identity. For many situations (such as for real servers) this is would be considered too much of a security risk. However, for developers running a RHEL VM on their laptop, this is a reasonable thing to do since access to their laptops is probably already protected by a password.&lt;/p&gt; &lt;p&gt;To set this up, two different methods are shown. You can either edit &lt;code&gt;/etc/sudoers&lt;/code&gt; or you can create a new file in &lt;code&gt;/etc/sudoers.d/&lt;/code&gt;.  The first is more straightforward, but the latter is easier to script and automate.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Edit &lt;code&gt;/etc/sudoers&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;As root, run &lt;code&gt;visudo&lt;/code&gt; to edit &lt;code&gt;/etc/sudoers&lt;/code&gt; and make the following changes. The advantage of using &lt;code&gt;visudo&lt;/code&gt; is that it will validate the changes to the file.&lt;/p&gt; &lt;p&gt;The default &lt;code&gt;/etc/sudoers&lt;/code&gt; file contains two lines for group &lt;code&gt;wheel&lt;/code&gt;; the &lt;code&gt;NOPASSWD:&lt;/code&gt; line is commented out.  Uncomment that line and comment out the &lt;code&gt;wheel&lt;/code&gt; line without &lt;code&gt;NOPASSWD&lt;/code&gt;. When you are done, it should look like this:&lt;/p&gt; &lt;pre&gt;## Allows people in group wheel to run all commands # %wheel ALL=(ALL) ALL ## Same thing without a password %wheel ALL=(ALL) NOPASSWD: ALL&lt;/pre&gt; &lt;h3&gt;Alternate method: Create a new file in &lt;code&gt;/etc/sudoers.d&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;You can create files in &lt;code&gt;/etc/sudoers.d&lt;/code&gt; that will be part of the &lt;code&gt;sudo&lt;/code&gt; configuration. This method is easier to script and automate. Also, since this doesn’t involve changing groups, you won’t have to log out and back in again. Change &lt;em&gt;your_id&lt;/em&gt; to your user ID.&lt;/p&gt; &lt;pre&gt;$ su - # echo -e “&lt;em&gt;your_id&lt;/em&gt;\tALL=(ALL)\tNOPASSWD: ALL" &amp;#62; /etc/sudoers.d/020_sudo_for_me # cat /etc/suders.d/020_my_sudo &lt;em&gt;your_id&lt;/em&gt; ALL=(ALL) NOPASSWD: ALL &lt;/pre&gt; &lt;h2&gt;Enable &lt;code&gt;sudo&lt;/code&gt; during system installation&lt;/h2&gt; &lt;p&gt;During RHEL system installation, you can enable &lt;code&gt;sudo&lt;/code&gt; for the user you create during the installation. There is an often overlooked (and misunderstood) &lt;em&gt;Make this user administrator&lt;/em&gt; option on the &lt;em&gt;User Creation&lt;/em&gt; screen where you enter the user ID and password. If you select the &lt;em&gt;Make this user administrator&lt;/em&gt; box, the user will be made part of the &lt;code&gt;wheel&lt;/code&gt; group during the installation.&lt;/p&gt; &lt;p&gt;I have to admit, I overlooked this option and didn’t understand what it did until I stumbled on &lt;a href="https://fedoramagazine.org/howto-use-sudo/"&gt;this article in &lt;em&gt;Fedora Magazine&lt;/em&gt;&lt;/a&gt;. While the article is about Fedora, this functionality is essentially the same for RHEL, since Fedora is the upstream community project that is used as the basis for RHEL.&lt;/p&gt; &lt;p&gt;For me, this finally cleared up the mystery of whys &lt;code&gt;sudo&lt;/code&gt; seem to work out of the box for some RHEL users but not others. This isn’t really explained well in the RHEL installation guide.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/08/rhel_7_createuser.png"&gt;&lt;img class=" aligncenter wp-image-514137 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/rhel_7_createuser-1024x416.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/rhel_7_createuser-1024x416.png" alt="RHEL 7 Install Create User" width="640" height="260" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/rhel_7_createuser.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/rhel_7_createuser-300x122.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/rhel_7_createuser-768x312.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;For more information&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;See the &amp;#8220;&lt;a href="http://access.redhat.com/site/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/chap-Gaining_Privileges.html"&gt;Gaining Privileges&lt;/a&gt;&amp;#8221; chapter in the &lt;em&gt;Red Hat Enterprise Linux 7 System Administrator&amp;#8217;s Guide&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;em&gt;See &amp;#8220;&lt;/em&gt;&lt;a href="https://access.redhat.com/solutions/1527"&gt;How to allow a normal user to run commands as root user using sudo&lt;/a&gt;&lt;em&gt;.&amp;#8221; &lt;/em&gt;This article is on the Red Hat Customer Portal. Join the Red Hat Developer Program to get a Red Hat ID, which will let you view the knowledgebase articles on the Red Hat Customer Portal.&lt;/li&gt; &lt;li&gt;See the &amp;#8220;&lt;a href="https://fedoramagazine.org/howto-use-sudo/"&gt;Configure your Fedora system to use sudo&lt;/a&gt;&amp;#8221; article in &lt;em&gt;Fedora Magazine&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F15%2Fhow-to-enable-sudo-on-rhel%2F&amp;#38;linkname=How%20to%20enable%20sudo%20on%20RHEL" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F15%2Fhow-to-enable-sudo-on-rhel%2F&amp;#38;linkname=How%20to%20enable%20sudo%20on%20RHEL" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F15%2Fhow-to-enable-sudo-on-rhel%2F&amp;#38;linkname=How%20to%20enable%20sudo%20on%20RHEL" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F15%2Fhow-to-enable-sudo-on-rhel%2F&amp;#38;linkname=How%20to%20enable%20sudo%20on%20RHEL" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F15%2Fhow-to-enable-sudo-on-rhel%2F&amp;#38;linkname=How%20to%20enable%20sudo%20on%20RHEL" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F15%2Fhow-to-enable-sudo-on-rhel%2F&amp;#38;linkname=How%20to%20enable%20sudo%20on%20RHEL" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F15%2Fhow-to-enable-sudo-on-rhel%2F&amp;#38;linkname=How%20to%20enable%20sudo%20on%20RHEL" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F15%2Fhow-to-enable-sudo-on-rhel%2F&amp;#38;linkname=How%20to%20enable%20sudo%20on%20RHEL" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F15%2Fhow-to-enable-sudo-on-rhel%2F&amp;#38;title=How%20to%20enable%20sudo%20on%20RHEL" data-a2a-url="https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/" data-a2a-title="How to enable sudo on RHEL"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/"&gt;How to enable sudo on RHEL&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/DLUzZOYzIq0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;You’ve probably seen tutorials that use sudo for running administrative commands as root. However when you try it, you get told your user ID is “not in the sudoers file, this incident will be reported.”  For developers, sudo can be very useful for running steps that require root access in build scripts. This article covers: How [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/"&gt;How to enable sudo on RHEL&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">514117</post-id><dc:creator>Rob Terzi</dc:creator><dc:date>2018-08-15T17:23:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/</feedburner:origLink></entry><entry><title>Improving rsync performance with GlusterFS</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lL-aLMBlZgg/" /><category term="Red Hat Gluster Storage" /><category term="Storage" /><category term="distributed file systems" /><category term="gluster" /><category term="GlusterFS" /><category term="performance" /><category term="performance tuning" /><category term="Red Hat Gluster" /><category term="rsync" /><author><name>Benny Turner</name></author><id>https://developers.redhat.com/blog/?p=484507</id><updated>2018-08-14T11:00:11Z</updated><published>2018-08-14T11:00:11Z</published><content type="html">&lt;p&gt;&lt;a href="https://rsync.samba.org/"&gt;Rsync&lt;/a&gt; is a particularly tough workload for &lt;a href="https://redhatstorage.redhat.com/products/glusterfs/"&gt;GlusterFS&lt;/a&gt; because with its defaults, it exercises some of the worst case operations for GlusterFS. GlusterFS is the core of Red Hat Gluster&amp;#8217;s scale-out storage solution. Gluster is an open, software-defined storage (SDS) platform that is designed to scale out to handle data intensive tasks across many servers in physical, virtual, or cloud deployments. Since GlusterFS is a POSIX compatible distributed file system, getting the best performance from rsync requires some tuning/tweaking on both sides.&lt;/p&gt; &lt;p&gt;In this post, I will go through some of the pain points and the different tunables for working around the pain points.  Getting rsync to run as fast on GlusterFS as it would on a local file system is not really feasible given its architecture, but below I describe how to get as close as possible.&lt;/p&gt; &lt;p&gt;&lt;span id="more-484507"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;1)  The main issue with rsync and GlusterFS is rsync uses the &amp;#8220;write new then rename&amp;#8221; idiom when creating files.  The means that for every file created, GlusterFS is forced to rename the file, which is by far the most expensive file operation (FOP).  The Gluster distributed hash table (DHT) developers recognized the issue with &amp;#8220;write new then rename&amp;#8221; workloads and added a couple tunables to help this workload. The following is from the documentation:&lt;/p&gt; &lt;p&gt;&lt;em&gt;&amp;#8220;With the file-lookup mechanisms we already have in place, it&amp;#8217;s not necessary to move a file from one brick to another when it&amp;#8217;s renamed &amp;#8211; even across directories. It will still be found, albeit a little less efficiently. The first client to look for it after the rename will add a linkfile, which every other client will follow from then on. Also, every client that has found the file once will continue to find it based on its cached location, without any network traffic at all. Because the extra lookup cost is small, and the movement cost might be very large, DHT renames the file &amp;#8220;in place&amp;#8221; on its current brick instead (taking advantage of the fact that directories exist everywhere).&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;This optimization is further extended to handle cases where renames are very common. For example, rsync and similar tools often use a &amp;#8220;write new then rename&amp;#8221; idiom in which a file &amp;#8220;xxx&amp;#8221; is actually written as &amp;#8220;.xxx.1234&amp;#8221; and then moved into place only after its contents have been fully written. To make this process more efficient, DHT uses a regular expression to separate the permanent part of a file&amp;#8217;s name (in this case &amp;#8220;xxx&amp;#8221;) from what is likely to be a temporary part (the leading &amp;#8220;.&amp;#8221; and trailing &amp;#8220;.1234&amp;#8221;). That way, after the file is renamed it will be in its correct hashed location &amp;#8211; which it wouldn&amp;#8217;t be otherwise if &amp;#8220;xxx&amp;#8221; and &amp;#8220;.xxx.1234&amp;#8221; hash differently &amp;#8211; and no linkfiles or broadcast lookups will be necessary.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;In fact, there are two regular expressions available for this purpose &amp;#8211; cluster.rsync-hash-regex and cluster.extra-hash-regex. As its name implies, rsync-hash-regex defaults to the pattern that regex uses, while extra-hash-regex can be set by the user to support a second tool using the same temporary-file idiom.&amp;#8221;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;# gluster v set testvol cluster.rsync-hash-regex none&lt;/pre&gt; &lt;p&gt;It should be noted that this setting will cause a lot of files to be placed in incorrect subvolumes, creating a lot of link files until a rebalance is executed.  The link files will add a small amount of overhead when these files are accessed; while a rebalance is not necessary immediately, it&amp;#8217;s a good idea to rebalance at some point after using rsync with this tunable.&lt;/p&gt; &lt;p&gt;2)  Rsync defaults to a pretty small request size, and this also is a weak point on GlusterFS.  GlusterFS tends to perform best with request sizes over 64KB; 1MB tends to provide the best performance. With request sizes that are less than 4KB, things really start to degrade.  Rsync does have a tunable to change this behavior. It&amp;#8217;s called &lt;code&gt;block-size&lt;/code&gt;.  Rsync&amp;#8217;s default for block size is 2KB, which really hurts performance when rsyncing to/from GlusterFS.  Also note that the maximum block size for rsync is 128KB:&lt;/p&gt; &lt;pre&gt;#define MAX_BLOCK_SIZE ((int32)1 &amp;#60;&amp;#60; 17)u&lt;/pre&gt; &lt;p&gt;When rsyncing to/from GlusterFS, I suggest using the block size of 128KB. Some older versions support up to 512MB. If you have an older version, I suggest using 1MB.  You can set block size using the following command, which forces the block size used in rsync’s delta-transfer algorithm to a fixed value. The value is normally selected based on the size of each file being updated. See the Rsync Technical Report for details.&lt;/p&gt; &lt;pre&gt;-B, --block-size=BLOCKSIZE&lt;/pre&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;# rsync -vrah /gluster-mount/ /home/bturner/Downloads/ --progress -B=131072&lt;/pre&gt; &lt;p&gt;You can also look at the following option (see the rsync man page):&lt;/p&gt; &lt;pre&gt;-W, --whole-file&lt;/pre&gt; &lt;p&gt;This option disables rsync’s delta-transfer algorithm, which causes all transferred files to be sent whole. The transfer may be faster if this option is used when the bandwidth between the source and destination machines is higher than the bandwidth to disk (especially when the &amp;#8220;disk&amp;#8221; is actually a networked filesystem). This is the default when both the source and destination are specified as local paths, but only if no batch-writing option is in effect.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;whole-file&lt;/code&gt; option can be used with or instead of the block size option. I suggest testing to see which works best for your data set.&lt;/p&gt; &lt;p&gt;3)  Next, we come to the &lt;code&gt;--inplace&lt;/code&gt; option.  This option actually changes how rsync behaves. This option behaves similarly to the rsync regex option discussed above except it is implemented on the rsync side instead of the GlusterFS side.  The following information is from the man page:&lt;/p&gt; &lt;p&gt;&lt;em&gt;&amp;#8211;inplace update destination files in-place&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;This option changes how rsync transfers a file when its data needs to be updated: instead of the default method of creating a new copy of the file and moving it into place when it is com&lt;/em&gt;&lt;em&gt;plete, rsync instead writes the updated data directly to the destination file.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;This has several effects:&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt; Hard links are not broken. This means the new data will be visible through other hard links to the destination file. Moreover, attempts to copy differing source files onto a multi&lt;/em&gt;&lt;em&gt;ply-linked destination file will result in a &amp;#8220;tug of war&amp;#8221; with the destination data changing back and forth.&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;In-use binaries cannot be updated (either the OS will prevent this from happening, or binaries that attempt to swap-in their data will misbehave or crash).&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;The file’s data will be in an inconsistent state during the transfer and will be left that way if the transfer is interrupted or if an update fails.&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;A file that rsync cannot write to cannot be updated. While a super user can update any file, a normal user needs to be granted write permission for the open of the file for writing to &lt;/em&gt;&lt;em&gt;be successful.&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;The efficiency of rsync’s delta-transfer algorithm may be reduced if some data in the destination file is overwritten before it can be copied to a position later in the file. This &lt;/em&gt;&lt;em&gt;does not apply if you use &amp;#8211;backup, since rsync is smart enough to use the backup file as the basis file for the transfer.&lt;/em&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;em&gt;WARNING: you should not use this option to update files that are being accessed by others, so be careful when choosing to use this for a copy.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;This option is useful for transferring large files with block-based changes or appended data, and also on systems that are disk bound, not network bound. It can also help keep a &lt;/em&gt;&lt;em&gt;copy-on-write filesystem snapshot from diverging the entire contents of a file that only has minor changes.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;The option implies &amp;#8211;partial (since an interrupted transfer does not delete the file), but conflicts with &amp;#8211;partial-dir and &amp;#8211;delay-updates. Prior to rsync 2.6.4 &amp;#8211;inplace was also incompat&lt;/em&gt;&lt;em&gt;ible with &amp;#8211;compare-dest and &amp;#8211;link-dest.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;I recommend using the GlusterFS tunable when you have a changing data set or you don&amp;#8217;t want to mess with the default operation of rsync.  I usually use either the GlusterFS tunable or &lt;code&gt;--inplace&lt;/code&gt;. I haven&amp;#8217;t tried using both at the same time, but I expect that since we would no longer be using &amp;#8220;write new then rename,&amp;#8221; the GlusterFS tunable wouldn&amp;#8217;t have any effect.&lt;/p&gt; &lt;p&gt;4)  Other workarounds:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;tar&lt;/code&gt; up the directory and use &lt;code&gt;scp&lt;/code&gt;. In some cases, geo-replication TARs up data and sends it as one file, which can reduce the number of round trips that go over the wire as well as avoid the rename FOP.&lt;/li&gt; &lt;li&gt;This can be sped up with the &lt;a href="https://github.com/parallel-fs-utils/multi-thread-posix"&gt;parallel-untar&lt;/a&gt; utility from Ben England.&lt;/li&gt; &lt;li&gt;Rsync to a local directory and copy to GlusterFS.&lt;/li&gt; &lt;li&gt;Use geo-replication.&lt;/li&gt; &lt;li&gt;Use &lt;code&gt;cp&lt;/code&gt; with the proper flags to preserve whatever metadata/xattrs/etc. that you wish to preserve.&lt;/li&gt; &lt;li&gt;Use some other application that does not follow the &amp;#8220;write new then rename&amp;#8221; workflow.  Remember it&amp;#8217;s the renames that really kill performance here, so using an application that avoids them will improve performance.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Try these tips to see if they increase the performance of your rsync workloads. If you know of any tip I missed, please let me know in the comments!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F14%2Fimproving-rsync-performance-with-glusterfs%2F&amp;#38;linkname=Improving%20rsync%20performance%20with%20GlusterFS" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F14%2Fimproving-rsync-performance-with-glusterfs%2F&amp;#38;linkname=Improving%20rsync%20performance%20with%20GlusterFS" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F14%2Fimproving-rsync-performance-with-glusterfs%2F&amp;#38;linkname=Improving%20rsync%20performance%20with%20GlusterFS" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F14%2Fimproving-rsync-performance-with-glusterfs%2F&amp;#38;linkname=Improving%20rsync%20performance%20with%20GlusterFS" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F14%2Fimproving-rsync-performance-with-glusterfs%2F&amp;#38;linkname=Improving%20rsync%20performance%20with%20GlusterFS" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F14%2Fimproving-rsync-performance-with-glusterfs%2F&amp;#38;linkname=Improving%20rsync%20performance%20with%20GlusterFS" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F14%2Fimproving-rsync-performance-with-glusterfs%2F&amp;#38;linkname=Improving%20rsync%20performance%20with%20GlusterFS" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F14%2Fimproving-rsync-performance-with-glusterfs%2F&amp;#38;linkname=Improving%20rsync%20performance%20with%20GlusterFS" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F14%2Fimproving-rsync-performance-with-glusterfs%2F&amp;#38;title=Improving%20rsync%20performance%20with%20GlusterFS" data-a2a-url="https://developers.redhat.com/blog/2018/08/14/improving-rsync-performance-with-glusterfs/" data-a2a-title="Improving rsync performance with GlusterFS"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/14/improving-rsync-performance-with-glusterfs/"&gt;Improving rsync performance with GlusterFS&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lL-aLMBlZgg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Rsync is a particularly tough workload for GlusterFS because with its defaults, it exercises some of the worst case operations for GlusterFS. GlusterFS is the core of Red Hat Gluster&amp;#8217;s scale-out storage solution. Gluster is an open, software-defined storage (SDS) platform that is designed to scale out to handle data intensive tasks across many servers [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/14/improving-rsync-performance-with-glusterfs/"&gt;Improving rsync performance with GlusterFS&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/08/14/improving-rsync-performance-with-glusterfs/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">484507</post-id><dc:creator>Benny Turner</dc:creator><dc:date>2018-08-14T11:00:11Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/14/improving-rsync-performance-with-glusterfs/</feedburner:origLink></entry><entry><title>Hotrod clients C++ and C# 8.3.0.Beta1 are out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9tX9Hsb9Dwc/hotrod-clients-c-and-c-830beta1-are-out.html" /><category term="beta" scheme="searchisko:content:tags" /><category term="C#" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="minor release" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>rigazilla</name></author><id>searchisko:content:id:jbossorg_blog-hotrod_clients_c_and_c_8_3_0_beta1_are_out</id><updated>2018-08-14T07:18:08Z</updated><published>2018-08-14T07:11:00Z</published><content type="html">Dear Infinispanners,&lt;br /&gt;&lt;br /&gt;The C++ and C# 8.3.0.Beta1 releases are available!&lt;br /&gt;&lt;br /&gt;Main feature for this release is: transactions. Clients can now run sequence of hotrod operations in a transactional way. Basic methods are provided to begin, commit or rollback a transaction over an hotrod connection (hotrod 2.7 and Infinispan 9.3+ are required).&lt;br /&gt;API are quite easy to use: &lt;br /&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;script src="https://gist.github.com/rigazilla/b862e55148fef8b7fcc04ef8ac807af5.js"&gt;&lt;/script&gt; &lt;/td&gt;&lt;td&gt;&lt;script src="https://gist.github.com/rigazilla/11dce4ec0545d1b4900c8a10f0ef17c0.js"&gt;&lt;/script&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Source code, binaries and docs are at the usual place. Thank you for following us!&lt;br /&gt;The Infinispan Team &lt;br /&gt;[1]&lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314125&amp;amp;version=12338869"&gt; Release notes&lt;/a&gt;&lt;br /&gt;[2++] &lt;a href="https://github.com/infinispan/cpp-client/tree/8.3.0.Beta1"&gt;C++ code for 8.3.0.Beta1&lt;/a&gt;&lt;br /&gt;[2#] &lt;a href="https://github.com/infinispan/dotnet-client/tree/8.3.0.Beta1"&gt;C# code for 8.3.0.Beta1&lt;/a&gt;&lt;br /&gt;[3] &lt;a href="http://infinispan.org/hotrod-clients/"&gt;Downloads&lt;/a&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/CMgsAVcqIYY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9tX9Hsb9Dwc" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispanners, The C++ and C# 8.3.0.Beta1 releases are available! Main feature for this release is: transactions. Clients can now run sequence of hotrod operations in a transactional way. Basic methods are provided to begin, commit or rollback a transaction over an hotrod connection (hotrod 2.7 and Infinispan 9.3+ are required). API are quite easy to use: Source code, binaries and docs are a...</summary><dc:creator>rigazilla</dc:creator><dc:date>2018-08-14T07:11:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/CMgsAVcqIYY/hotrod-clients-c-and-c-830beta1-are-out.html</feedburner:origLink></entry><entry><title>Version 1.5 of Apiman is released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/KUlVoNuQSRc/release-1.5.html" /><category term="feed_group_name_apiman" scheme="searchisko:content:tags" /><category term="feed_name_apiman" scheme="searchisko:content:tags" /><author><name>Marc Savy</name></author><id>searchisko:content:id:jbossorg_blog-version_1_5_of_apiman_is_released</id><updated>2018-08-14T03:00:00Z</updated><published>2018-08-14T03:00:00Z</published><content type="html">&lt;div class="paragraph"&gt; &lt;p&gt;I&amp;#8217;m happy to announce that Apiman 1.5.1.Final is out.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It contains an important new policy feature: the ability to modify policy failures before they are returned to users (even if they are thrown by another policy).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This means that policies such as CORS can add their headers, irrespective of whether the request was successful or not (e.g. due to rate limiting).&lt;/p&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="failure-processing"&gt;Failure Processing&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When a policy throws a failure (e.g. rate limit reached), previously this caused an immediate termination that bypassed all other policies. &lt;strong&gt;Failure processing&lt;/strong&gt; was requested in the community to allow policies to modify failures emitted by other policies, such that headers can be set.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To implement this, you simply need to override the default method &lt;code&gt;processFailure&lt;/code&gt; in &lt;code&gt;IPolicy&lt;/code&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span class="keyword"&gt;default&lt;/span&gt; &lt;span class="type"&gt;void&lt;/span&gt; processFailure(PolicyFailure failure, IPolicyContext context, &lt;span class="predefined-type"&gt;Object&lt;/span&gt; config, IPolicyFailureChain chain) { ... }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Or, if you&amp;#8217;re using &lt;code&gt;AbstractMappedPolicy&lt;/code&gt;, then you should override &lt;code&gt;doProcessFailure&lt;/code&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span class="directive"&gt;protected&lt;/span&gt; &lt;span class="type"&gt;void&lt;/span&gt; doProcessFailure(PolicyFailure failure, IPolicyContext context, C config, IPolicyFailureChain chain) { ... }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For example, in the &lt;a href="https://github.com/msavy/apiman-plugins/blob/fd2aa46c62a60c7450a3777527f37723908e0865/cors-policy/src/main/java/io/apiman/plugins/cors_policy/CorsPolicy.java#L114-L125"&gt;CORS plugin&lt;/a&gt; it simply adds the headers:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span class="annotation"&gt;@Override&lt;/span&gt; &lt;span class="directive"&gt;protected&lt;/span&gt; &lt;span class="type"&gt;void&lt;/span&gt; doProcessFailure(PolicyFailure failure, IPolicyContext context, CorsConfigBean config, IPolicyFailureChain chain) { CaseInsensitiveStringMultiMap corsHeaders = getResponseHeaders(context); &lt;span class="keyword"&gt;if&lt;/span&gt;(corsHeaders != EMPTY_MAP) { failure.getHeaders().putAll(corsHeaders.toMap()); } chain.doFailure(failure); }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Meaning that even if a rate limit is hit, then the headers will still be added.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you experience any issues, please report them to us via &lt;a href="https://issues.jboss.org/browse/APIMAN/"&gt;JIRA&lt;/a&gt;, &lt;a href="https://github.com/apiman/apiman"&gt;GitHub&lt;/a&gt;, or &lt;a href="https://lists.jboss.org/mailman/listinfo/apiman-user"&gt;the mailing list&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="download-1-5-1-final"&gt;Download 1.5.1.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://downloads.jboss.org/apiman/1.5.1.Final/apiman-distro-vertx-1.5.1.Final.zip"&gt;Vert.x (Gateway Only)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://downloads.jboss.org/apiman/1.5.1.Final/apiman-distro-wildfly10-1.5.1.Final-overlay.zip"&gt;WildFly 10 or EAP 7.1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://downloads.jboss.org/apiman/1.5.1.Final/apiman-distro-wildfly11-1.5.1.Final-overlay.zip"&gt;WildFly 11&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://downloads.jboss.org/apiman/1.5.1.Final/apiman-distro-eap7-1.5.1.Final-overlay.zip"&gt;EAP 7&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://downloads.jboss.org/apiman/1.5.1.Final/apiman-distro-tomcat8-1.5.1.Final-overlay.zip"&gt;Tomcat 8+&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/KUlVoNuQSRc" height="1" width="1" alt=""/&gt;</content><summary>I’m happy to announce that Apiman 1.5.1.Final is out. It contains an important new policy feature: the ability to modify policy failures before they are returned to users (even if they are thrown by another policy). This means that policies such as CORS can add their headers, irrespective of whether the request was successful or not (e.g. due to rate limiting). Failure Processing When a policy thr...</summary><dc:creator>Marc Savy</dc:creator><dc:date>2018-08-14T03:00:00Z</dc:date><feedburner:origLink>http://apiman.io/blog/apiman/release/2018/08/13/release-1.5.html</feedburner:origLink></entry><entry><title>Hibernate ORM 5.3.5.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6utzHJFqj80/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Guillaume Smet</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_orm_5_3_5_final_released</id><updated>2018-08-14T13:36:30Z</updated><published>2018-08-14T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Today, we released a new maintenance release of Hibernate ORM 5.3.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It will be the version included in WildFly 14.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="bug-fixes"&gt;&lt;a class="anchor" href="#bug-fixes"&gt;&lt;/a&gt;Bug fixes&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This release mostly contains bugfixes:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HHH-12875"&gt;HHH-12875&lt;/a&gt; and &lt;a href="https://hibernate.atlassian.net/browse/HHH-12882"&gt;HHH-12882&lt;/a&gt; - Various fixes regarding &lt;code&gt;@Where&lt;/code&gt; support&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HHH-12871"&gt;HHH-12871&lt;/a&gt; - Metamodel contains managed types related to dynamic-map entities that have been excluded&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HHH-12905"&gt;HHH-12905&lt;/a&gt; - Passing null as parameter is not allowed even when enablePassingNulls() has been called&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HHH-12906"&gt;HHH-12906&lt;/a&gt; - Statistics.getCollectionRoleNames() reports incorrect value&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HHH-12907"&gt;HHH-12907&lt;/a&gt; - Avoid garbage collection pressure when creating proxies with ByteBuddy&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="naive-limit-handler-for-sybase"&gt;&lt;a class="anchor" href="#naive-limit-handler-for-sybase"&gt;&lt;/a&gt;Naive limit handler for Sybase&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We implemented a naive limit handler for Sybase: it will only be triggered for traditional &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;SELECT DISTINCT&lt;/code&gt; queries and will add a &lt;code&gt;TOP&lt;/code&gt; clause to these queries.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;While simple, it should be useful in a lot of common scenarios.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="dependency-upgrade"&gt;&lt;a class="anchor" href="#dependency-upgrade"&gt;&lt;/a&gt;Dependency upgrade&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You should update your ByteBuddy dependency to 1.8.17 if you define it manually.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="full-changelog"&gt;&lt;a class="anchor" href="#full-changelog"&gt;&lt;/a&gt;Full changelog&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find the full list of changes &lt;a href="https://hibernate.atlassian.net/projects/HHH/versions/31695/tab/release-report-all-issues"&gt;here&lt;/a&gt; (or, for people without a Hibernate Jira account, &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?version=31695&amp;amp;styleName=Html&amp;amp;projectId=10031"&gt;here&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="getting-5-3-5-final"&gt;&lt;a class="anchor" href="#getting-5-3-5-final"&gt;&lt;/a&gt;Getting 5.3.5.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All details are available and up to date on &lt;a href="http://hibernate.org/orm/releases/5.3/#get-it"&gt;the dedicated page on hibernate.org&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/tagged/hibernate"&gt;&lt;strong&gt;hibernate&lt;/strong&gt; tag on Stack Overflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-orm"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HHH"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6utzHJFqj80" height="1" width="1" alt=""/&gt;</content><summary>Today, we released a new maintenance release of Hibernate ORM 5.3. It will be the version included in WildFly 14. What’s new Bug fixes This release mostly contains bugfixes: HHH-12875 and HHH-12882 - Various fixes regarding @Where support HHH-12871 - Metamodel contains managed types related to dynamic-map entities that have been excluded HHH-12905 - Passing null as parameter is not allowed even wh...</summary><dc:creator>Guillaume Smet</dc:creator><dc:date>2018-08-14T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/08/14/hibernate-orm-535-final-out/</feedburner:origLink></entry><entry><title>How to install Python 3 on RHEL</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xp5SwaTg8-8/" /><category term="Python" /><category term="Red Hat Enterprise Linux" /><category term="Red Hat Software Collections" /><category term="python" /><category term="RHEL" /><category term="RHSCL" /><category term="virtualenv" /><author><name>Rob Terzi</name></author><id>https://developers.redhat.com/blog/?p=512967</id><updated>2018-08-13T11:00:46Z</updated><published>2018-08-13T11:00:46Z</published><content type="html">&lt;p&gt;This article shows how to install Python 3, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;venv&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, and &lt;code&gt;pipenv&lt;/code&gt; on &lt;a href="https://developers.redhat.com/products/rhel/overview/"&gt;Red Hat Enterprise Linux&lt;/a&gt; 7. After following the steps in this article, you should be in a good position to follow many Python guides and tutorials using RHEL.&lt;/p&gt; &lt;p&gt;Using Python virtual environments is a best practice to isolate project-specific dependencies and create reproducible environments. Other tips and FAQs for working with Python and software collections on RHEL 7 are also covered.&lt;/p&gt; &lt;p&gt;There are a number of different ways to get Python 3 installed on RHEL. This article uses Red Hat Software Collections because these give you a current Python installation that is built and supported by Red Hat. During development, support might not seem that important to you. However, support is important to those who have to deploy and operate the applications you write. To understand why this is important, consider what happens when your application is in production and a critical security vulnerability in a core library (for example SSL/TLS) is discovered. This type of scenario is why many enterprises use Red Hat.&lt;/p&gt; &lt;p&gt;Python 3.6 is used in this article. It was the most recent, stable release when this was written. However, you should be able to use these instructions for any of the versions of Python in Red Hat Software Collections including 2.7, 3.4, 3.5, and future collections such as 3.7.&lt;/p&gt; &lt;p&gt;&lt;span id="more-512967"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In this article, the following topics are discussed:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="#tldr"&gt;TL;DR&lt;/a&gt; (summary of steps)&lt;/li&gt; &lt;li&gt;&lt;a href="#why-rhscl"&gt;Why use Red Hat Software Collections&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#full-install"&gt;Full installation steps with explanations&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#how-to-use"&gt;How to use Python 3 through Red Hat Software Collections&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#create-env"&gt;Working with Python virtual environments&lt;/a&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="#which-venv"&gt;Should I use &lt;code&gt;venv&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt; or something else?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#use-venv"&gt;Using &lt;code&gt;venv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#use-virtualenv"&gt;Using &lt;code&gt;virtualenv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#use-pipenv"&gt;Managing application dependencies using &lt;code&gt;pipenv&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="#python-tips"&gt;General tips for working with Python&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#scl-tips"&gt;Tips for working with software collections&lt;/a&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="#scl-first"&gt;Enable the Python collection *before* the virtual environment&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#scl-permanent"&gt;How to permanently enable a software collection&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#scl-script"&gt;How to use Python 3 from RHSCL in the #! (shebang) line of a script&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#which-scl-enabled"&gt;How to tell which software collections are enabled&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#which-scl-installed"&gt;How to see which software collections are installed&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#more-info"&gt;More information: Developing in Python on Red Hat Platforms&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;&lt;a id="tldr"&gt;&lt;/a&gt;TL;DR&lt;/h2&gt; &lt;p&gt;Here are the basic steps so you can just get going. See below for explanations and more details.&lt;/p&gt; &lt;h3&gt;How to install Python 3 on RHEL&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Become &lt;code&gt;root&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Enable the &lt;code&gt;rhscl&lt;/code&gt; and &lt;code&gt;optional&lt;/code&gt; software repos using &lt;code&gt;subscription-manager&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Use &lt;code&gt;yum&lt;/code&gt; to install &lt;code&gt;@development&lt;/code&gt;. This makes sure you&amp;#8217;ve got GCC, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, etc. so you can build any modules that contain compiled code.&lt;/li&gt; &lt;li&gt;Use &lt;code&gt;yum&lt;/code&gt; to install &lt;code&gt;rh-python36&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Optional: Use &lt;code&gt;yum&lt;/code&gt; to install &lt;code&gt;python-tools&lt;/code&gt;, &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;scipy&lt;/code&gt;, and &lt;code&gt;six&lt;/code&gt; from RHSCL RPMs.&lt;/li&gt; &lt;/ol&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ su - # subscription-manager repos --enable rhel-7-server-optional-rpms \ --enable rhel-server-rhscl-7-rpms # yum -y install @development # yum -y install rh-python36 # yum -y install rh-python36-numpy \ rh-python36-scipy \ rh-python36-python-tools \ rh-python36-python-six # exit &lt;/pre&gt; &lt;h3&gt;Using Python 3 on RHEL&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Under your normal user ID, run &lt;code&gt;scl enable&lt;/code&gt; to add &lt;code&gt;python 3&lt;/code&gt; to your path(s).&lt;/li&gt; &lt;li&gt;Create a Python virtual environment and activate it. (Note: your prompt has changed to show the virtual environment.)&lt;/li&gt; &lt;li&gt;Install whatever additional modules you need with &lt;code&gt;pip&lt;/code&gt; in an isolated environment without being &lt;code&gt;root&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ python3 -V Python 3.6.3 $ python -V # python now also points to Python3 Python 3.6.3 $ mkdir ~/pydev $ cd ~/pydev $ python3 -m venv py36-venv $ source py36-env/bin/activate (py36-venv) $ python3 -m pip install ...some modules... &lt;/pre&gt; &lt;p&gt;If you start a new session, here are the steps for using your virtual environment:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ cd ~/pydev $ source py36-env/bin/activate &lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;&lt;a id="why-rhscl"&gt;&lt;/a&gt;Why use Red Hat Software Collections&lt;/h2&gt; &lt;p&gt;The benefit of using Red Hat Software Collections is that you can have multiple versions of Python installed at the same time along with the base Python 2.7 that shipped with RHEL 7. You can easily switch between versions with &lt;code&gt;scl enable&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Note: The latest stable packages for .Net Core, Go, Rust, PHP 7, Ruby 2.5, GCC, Clang/LLVM, Nginx, MongoDB, MariaDB, PostgreSQL, and more are all &lt;code&gt;yum&lt;/code&gt;&amp;#8211; installable as software collections. So you should take the time to get comfortable with software collections.&lt;/p&gt; &lt;p&gt;Using software collections requires an extra step because you have to enable the collection you want to use. Enabling just adds the necessary paths (&lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;MANPATH&lt;/code&gt;, &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;) to your environment. Once you get the hang of it, software collections are fairly easy to use. It really helps to understand the way that environment-variable changes work in Linux/UNIX. Changes can be made only to the current process. When a child process is created, it inherits the environment of the parent. Any environment changes made in the parent after the child has been created will have no effect on the child. Therefore, the changes made by &lt;code&gt;scl enable&lt;/code&gt; will affect only the current terminal session or anything started from it. This article also shows how you can permanently enable a software collection for your user account.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;&lt;a id="full-install"&gt;&lt;/a&gt;Installation Prerequisites&lt;/h2&gt; &lt;h3&gt;Install development tools including GCC, make, and git&lt;/h3&gt; &lt;p&gt;If you install modules that depend on compiled code you&amp;#8217;ll need the tools to compile them. If you haven&amp;#8217;t already installed development tools run the following command:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ su - # yum install @development &lt;/pre&gt; &lt;h3&gt;Enable repos with additional developer tools&lt;/h3&gt; &lt;p&gt;While the default/base RHEL software repos have many development tools, these are the older versions that are shipped with the OS and are supported for the full 10-year life of the OS. Packages that are updated more frequently and have a different support lifecycle are distributed in other repos that aren&amp;#8217;t enabled by default.&lt;/p&gt; &lt;p&gt;Red Hat Software Collections are in the &lt;code&gt;rhscl&lt;/code&gt; repo. RHSCL packages have some dependencies on packages in the &lt;code&gt;optional-rpms&lt;/code&gt; repo, so you need to enable both.&lt;/p&gt; &lt;p&gt;To enable the additional repos, run the following commands as &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ su - # subscription-manager repos \ --enable rhel-7-server-optional-rpms \ --enable rhel-server-rhscl-7-rpms &lt;/pre&gt; &lt;p&gt;Notes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;You can enter the above all on one line &lt;strong&gt;without the backslashes&lt;/strong&gt;. The backslashes are needed if you want to use multiple lines for readability.&lt;/li&gt; &lt;li&gt;If you are using the &lt;em&gt;workstation&lt;/em&gt; variant of RHEL, change &lt;code&gt;-server-&lt;/code&gt; to &lt;code&gt;-workstation-&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;This command needs to be run only once. The repos will stay enabled. All of the enabled repos will be searched by &lt;code&gt;yum&lt;/code&gt; when installing or updating software.&lt;/li&gt; &lt;li&gt;The &lt;a href="https://developers.redhat.com/products/rhel/overview/"&gt;no-cost RHEL subscription for developers&lt;/a&gt; includes access to all of these repos and the &lt;em&gt;server&lt;/em&gt; variant of RHEL. The &lt;em&gt;server&lt;/em&gt; variant is a superset.&lt;/li&gt; &lt;li&gt;For more information, see the &lt;a href="https://developers.redhat.com/articles/frequently-asked-questions-no-cost-red-hat-enterprise-linux-developer-subscription/"&gt;FAQ for the no-cost subscription&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To see which repos are available for your current subscription, run the following command:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # subscription-manager repos --list &lt;/pre&gt; &lt;p&gt;To see which repos are enabled, use &lt;code&gt;--list-enabled&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # subscription-manager repos --list-enabled &lt;/pre&gt; &lt;hr /&gt; &lt;h2&gt;Install Python 3&lt;/h2&gt; &lt;p&gt;You can now install Python 3.6 (or other versions in RHSCL) with &lt;code&gt;yum&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # yum install rh-python36 &lt;/pre&gt; &lt;p&gt;Notes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;These packages will install in &lt;code&gt;/opt/rh/&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;They will not be added to your path until you run &lt;code&gt;scl enable&lt;/code&gt;. See below.&lt;/li&gt; &lt;li&gt;For other versions of Python, use the following as the package/collection name:&lt;br /&gt; Python 3.5: &lt;code&gt;rh-python35&lt;/code&gt;&lt;br /&gt; Python 3.4: &lt;code&gt;rh-python34&lt;/code&gt;&lt;br /&gt; Python 2.7.13: &lt;code&gt;python27&lt;/code&gt;&lt;/li&gt; &lt;li&gt;A number of additional packages will be installed as dependencies. These include &lt;code&gt;python-devel&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;python-devel&lt;/code&gt; package contains the files needed if you have to build any modules that dynamically link into Python (such as C/C++ code).&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Install additional packages&lt;/h3&gt; &lt;p&gt;Optionally, you may want to install the following RPM packages that are part of the software collection:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Python tools: &lt;code&gt;rh-python36-python-tools&lt;/code&gt; is a collection of tools included with Python 3, &lt;code&gt;2to3&lt;/code&gt;, and &lt;code&gt;idle3&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Numpy: &lt;code&gt;rh-python36-numpy&lt;/code&gt; is a fast multidimensional array facility for Python.&lt;/li&gt; &lt;li&gt;Scipy: &lt;code&gt;rh-python36-scipy&lt;/code&gt; provides scientific tools for Python.&lt;/li&gt; &lt;li&gt;Six: &lt;code&gt;rh-python36-python-six&lt;/code&gt; provides Python 2 and 3 compatible utilities.&lt;/li&gt; &lt;li&gt;Sqlalchemy: &lt;code&gt;rh-python36-python-sqlalchemy&lt;/code&gt; is a modular and flexible ORM library for Python.&lt;/li&gt; &lt;li&gt;PyYAML: &lt;code&gt;rh-python36-PyYAML&lt;/code&gt; is a YAML parser and emitter for Python.&lt;/li&gt; &lt;li&gt;Simplejson: &lt;code&gt;rh-python36-python-simplejson&lt;/code&gt; is a simple, fast, extensible JSON encoder/decoder for Python.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # yum install rh-python36-numpy \ rh-python36-scipy \ rh-python36-python-tools \ rh-python36-python-six &lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Note: By default system modules will not be used with Python virtual environments. Use the option &lt;code&gt;--system-site-packages&lt;/code&gt; when creating the virtual environment to include system modules.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;&lt;a id="how-to-use"&gt;&lt;/a&gt;How to use Python 3 (&lt;code&gt;scl enable&lt;/code&gt;)&lt;/h2&gt; &lt;p&gt;Python 3 is now installed. You no longer need to run under the &lt;code&gt;root&lt;/code&gt; user ID. The rest of the commands should be executed using your normal user account.&lt;/p&gt; &lt;p&gt;As previously mentioned, software collections are installed under &lt;code&gt;/opt/rh&lt;/code&gt; and aren&amp;#8217;t automatically added to your &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;MANPATH&lt;/code&gt;, and &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;. The command &lt;code&gt;scl enable&lt;/code&gt; will make the necessary changes and run a command. Because of the way environment variables work in Linux (and UNIX), the changes will take effect only for the command run by scl&lt;code&gt; enable&lt;/code&gt;. You can use &lt;code&gt;bash&lt;/code&gt; as the command to start an interactive session. This is one of the most common ways (but not the only way) of working with software collections.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ python3 -V Python 3.6.3 $ python -V # python now points to Python 3 Python 3.6.3 $ which python /opt/rh/rh-python36/root/usr/bin/python &lt;/pre&gt; &lt;p&gt;Note: Enabling the Python collection makes the &lt;code&gt;python&lt;/code&gt; in your path, with no version number, point to Python 3. &lt;code&gt;/usr/bin/python&lt;/code&gt; will still be Python 2. You can still run Python 2 by typing &lt;code&gt;python2&lt;/code&gt;, &lt;code&gt;python2.7&lt;/code&gt;, or &lt;code&gt;/usr/bin/python&lt;/code&gt;. It is recommended that you use a version number to avoid any ambiguity about what &lt;code&gt;python&lt;/code&gt; means. This also applies to other Python commands in &lt;code&gt;.../bin&lt;/code&gt; such as &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pydoc&lt;/code&gt;, &lt;code&gt;python-config&lt;/code&gt;, &lt;code&gt;pyvenv&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt;. For more information, see &lt;a href="https://www.python.org/dev/peps/pep-0394/"&gt;PEP 394&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;NOTE: See &lt;em&gt;How to permanently enable a software collection&lt;/em&gt; below to permanently put Python 3 in your path.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;&lt;a id="create-env"&gt;&lt;/a&gt;Create a Python virtual environment (best practice)&lt;/h2&gt; &lt;p&gt;Using Python virtual environments is a best practice to isolate project-specific dependencies and create reproducible environments. In other words, it&amp;#8217;s a way to avoid conflicting dependencies that lead to dependency hell. Using a virtual environment will let you use &lt;code&gt;pip&lt;/code&gt; to install whatever modules you need for your project in an isolated directory under your normal user ID. You can easily have multiple projects with different dependencies. To work on a specific project, you activate the virtual environment, which adds the right directories to your path(s).&lt;/p&gt; &lt;p&gt;Using virtual environments along with &lt;code&gt;pip list&lt;/code&gt;, &lt;code&gt;pip freeze&lt;/code&gt;, and a &lt;code&gt;requirements.txt&lt;/code&gt; file gives you a path to a reproducible environment to run your code it. Others that need to run your code can use the &lt;code&gt;requirements.txt&lt;/code&gt; file you generate to create a matching environment.&lt;/p&gt; &lt;p&gt;By default, virtual environments will not use any system installed modules, or modules installed under your home directory. From an isolation perspective and for creating reproducible environments this is generally considered the correct behavior. However, you can change that by using the argument &lt;code&gt;--system-site-packages&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;&lt;a id="which-venv"&gt;&lt;/a&gt;Should I use &lt;code&gt;venv&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt; or something else?&lt;/h3&gt; &lt;p&gt;When you install Python 3 from Red Hat Software Collections, &lt;code&gt;venv&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt;, and &lt;code&gt;pip&lt;/code&gt; will be installed, so you are ready to install whatever modules you choose. &amp;#8220;&lt;a href="https://docs.python.org/3/installing/index.html#installing-index"&gt;Installing Python Modules&lt;/a&gt;&amp;#8221; in the current Python documentation says this:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;venv&lt;/code&gt; is the standard tool for creating virtual environments, and has been part of Python since Python 3.3.&lt;/li&gt; &lt;li&gt;&lt;code&gt;virtualenv&lt;/code&gt; is a third-party alternative (and predecessor) to &lt;code&gt;venv&lt;/code&gt;. It allows virtual environments to be used on versions of Python prior to 3.4, which either don&amp;#8217;t provide &lt;code&gt;venv&lt;/code&gt; at all or aren&amp;#8217;t able to automatically install &lt;code&gt;pip&lt;/code&gt; into created environments.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So for all the recent versions of Python 3, &lt;code&gt;venv&lt;/code&gt; &lt;strong&gt;is preferred&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;If you work with Python 2.7, you&amp;#8217;ll need to use &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The commands to create the virtual environments differ only in the module name used. Once created, the command to activate the virtual environment is the same.&lt;/p&gt; &lt;p&gt;Note: for &lt;code&gt;virtualenv&lt;/code&gt;, using &lt;code&gt;python3.6 -m virtualenv&lt;/code&gt; is recommended instead of using the &lt;code&gt;virtualenv&lt;/code&gt; command. See &lt;em&gt;Avoid using Python wrapper scripts&lt;/em&gt; below for more information.&lt;/p&gt; &lt;h3&gt;&lt;a id="use-venv"&gt;&lt;/a&gt;Create and activate a virtual environment with &lt;code&gt;venv&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;If you haven&amp;#8217;t already done so, enable the &lt;code&gt;rh-python36&lt;/code&gt; collection:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash &lt;/pre&gt; &lt;p&gt;Now create the virtual environment. To avoid any surprises, use an explicit version number for running Python:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ python3.6 -m venv myproject1 &lt;/pre&gt; &lt;p&gt;Anytime you need to activate the virtual environment, run the following command.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ source myproject1/bin/activate &lt;/pre&gt; &lt;p&gt;Note: once you&amp;#8217;ve activated a virtual environment, your prompt will change to remind you that you are working in a virtual environment. Example:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; (myproject1) $ &lt;/pre&gt; &lt;p&gt;Note: When you log in again, or start a new session, you will need to activate the virtual environment using the &lt;code&gt;source&lt;/code&gt; command again. Note: you should already have run &lt;code&gt;scl enable&lt;/code&gt; before activating the virtual environment.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href="https://docs.python.org/3/tutorial/venv.html"&gt;Virtual Environments and Packages&lt;/a&gt; in the &lt;a href="https://docs.python.org/3/tutorial/"&gt;Python 3 tutorial&lt;/a&gt; at &lt;a href="http://docs.python.org"&gt;docs.python.org&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;&lt;a id="use-virtualenv"&gt;&lt;/a&gt;Create and activate a virtual environment with &lt;code&gt;virtualenv&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;If you haven&amp;#8217;t already done so, enable the &lt;code&gt;rh-python36&lt;/code&gt; collection:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash &lt;/pre&gt; &lt;p&gt;Now create the virtual environment. To avoid any surprises, use an explicit version number for running Python:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ python3.6 -m virtualenv myproject1 &lt;/pre&gt; &lt;p&gt;Anytime you need to activate the virtual environment, run the following command. Note: you should already have run &lt;code&gt;scl enable&lt;/code&gt; before activating the virtual environment.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ source myproject1/bin/activate &lt;/pre&gt; &lt;p&gt;Note: once you&amp;#8217;ve activated a virtual environment, your prompt will change to remind you that you are working in a virtual environment. Example:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; (myproject1) $ &lt;/pre&gt; &lt;p&gt;Note: When you log in again, or start a new session, you will need to activate the virtual environment using the &lt;code&gt;source&lt;/code&gt; command again. Note: you should already have run &lt;code&gt;scl enable&lt;/code&gt; before activating the virtual environment.&lt;/p&gt; &lt;p&gt;For more information, see &lt;em&gt;&lt;a href="https://packaging.python.org/guides/installing-using-pip-and-virtualenv/"&gt;Installing packages using pip and virtualenv&lt;/a&gt;&lt;/em&gt; in the &lt;a href="https://packaging.python.org/"&gt;&lt;em&gt;Python Packaging User Guide&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;&lt;a id="use-pipenv"&gt;&lt;/a&gt;Managing application dependencies with &lt;code&gt;pipenv&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;From the &lt;a href="https://packaging.python.org/"&gt;&lt;em&gt;Python Packaging User Guide&lt;/em&gt;&lt;/a&gt; tutorial, &lt;em&gt;&lt;a href="https://packaging.python.org/tutorials/managing-dependencies/"&gt;Managing Application Dependencies&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt; &lt;p style="padding-left: 30px;"&gt;&lt;a href="https://packaging.python.org/key_projects/#pipenv"&gt;&amp;#8220;Pipenv&lt;/a&gt; is a dependency manager for Python projects. If you&amp;#8217;re familiar with Node.js&amp;#8217; npm or Ruby&amp;#8217;s &lt;a href="http://bundler.io/"&gt;bundler&lt;/a&gt;, it is similar in spirit to those tools. While &lt;a href="https://packaging.python.org/key_projects/#pip"&gt;pip&lt;/a&gt; alone is often sufficient for personal use, Pipenv is recommended for collaborative projects as it&amp;#8217;s a higher-level tool that simplifies dependency management for common use cases.&amp;#8221;&lt;/p&gt; &lt;p&gt;With pipenv you no longer need to use &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt; separately. &lt;code&gt;pipenv&lt;/code&gt; isn&amp;#8217;t currently part of the standard Python 3 library or Red Hat Software Colleciton. You can install it using &lt;code&gt;pip&lt;/code&gt;. (Note: see the recommendation below about not running &lt;code&gt;pip install&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt;.) Since &lt;code&gt;pipenv&lt;/code&gt; uses &lt;code&gt;virtualenv&lt;/code&gt; to manage environments, you should install &lt;code&gt;pipenv&lt;/code&gt; &lt;strong&gt;without&lt;/strong&gt; having any virtual environment activated. However, don&amp;#8217;t forget to enable the Python 3 software collection first.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash # if you haven't already done so $ python3.6 -m pip install --user pipenv &lt;/pre&gt; &lt;p&gt;Creating and using isolated environments with &lt;code&gt;pipenv&lt;/code&gt; works a bit differently than &lt;code&gt;venv&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt;. A virtual environment will automatically be created if no &lt;code&gt;Pipfile&lt;/code&gt; exists in the current directory when you install the first package. However, it&amp;#8217;s a good practice to explicitly create an environment with the specific version of Python you want to use.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash # if you haven't already done so $ mkdir -p ~/pydev/myproject2 $ cd ~/pydev/myproject2 $ pipenv --python 3.6 $ pipenv install requests &lt;/pre&gt; &lt;p&gt;To activate a Pipenv environment, cd into that directory and run &lt;code&gt;pipenv shell&lt;/code&gt;.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash # if you haven't already done so $ cd ~/pydev/myproject2 $ pipenv shell &lt;/pre&gt; &lt;p&gt;Pipenv is similar to &lt;code&gt;scl enable&lt;/code&gt; in that it doesn&amp;#8217;t try to modify the current environment with &lt;code&gt;source&lt;/code&gt;, instead it starts a new shell. To deactivate, &lt;code&gt;exit&lt;/code&gt; the shell. You can also run a command in the pipenv environment by using &lt;code&gt;pipenv run command&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;&lt;a href="https://packaging.python.org/tutorials/managing-dependencies/"&gt;Managing Application Dependencies&lt;/a&gt;&lt;/em&gt; in the &lt;a href="https://packaging.python.org/"&gt;&lt;em&gt;Python Packaging User Guide&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;The &lt;a href="https://docs.pipenv.org/"&gt;documentation&lt;/a&gt; at &lt;a href="http://pipenv.org/"&gt;Pipenv.org&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;&lt;a href="https://docs.python-guide.org/dev/virtualenvs/"&gt;Pipenv and Virtual Environments&lt;/a&gt; &lt;/em&gt;at &lt;a href="https://docs.python-guide.org/"&gt;The Hitchhiker&amp;#8217;s Guide to Python&lt;/a&gt; website&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;&lt;a id="python-tips"&gt;&lt;/a&gt;General tips for working with Python&lt;/h2&gt; &lt;h3&gt;The &lt;code&gt;python&lt;/code&gt; command: Avoid surprises by using a version number&lt;/h3&gt; &lt;p&gt;To avoid surprises, don&amp;#8217;t type &lt;code&gt;python&lt;/code&gt;. Use an explicit version number in the command, such as &lt;code&gt;python3.6&lt;/code&gt; or &lt;code&gt;python2.7&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;At a minimum, always use &lt;code&gt;python3&lt;/code&gt; or &lt;code&gt;python2&lt;/code&gt;. If you are reading this article, you&amp;#8217;ve got more than one version of Python installed on your system. Depending on your path, you might get different versions. Activating and deactivating virtual environments, as well as enabling a software collection, changes your path, so it can be easy to be confused about what version you&amp;#8217;ll get from typing &lt;code&gt;python&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The same problem occurs with any of the Python utilities such as &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;pydoc&lt;/code&gt;. Using version numbers, for example, &lt;code&gt;pip3.6&lt;/code&gt;, is recommended. At a minimum use the major version number: &lt;code&gt;pip3&lt;/code&gt;. See the next section for a more robust alternative.&lt;/p&gt; &lt;h3&gt;Use &lt;code&gt;which&lt;/code&gt; to determine which Python version will be run&lt;/h3&gt; &lt;p&gt;Use the &lt;code&gt;which&lt;/code&gt; command to determine the full path that will be used when you type a command. This will help you understand which version of &lt;code&gt;python&lt;/code&gt; is in your path first and will get run when you type &lt;code&gt;python&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Examples:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ which python # before scl enable /usr/bin/python $ scl enable rh-python36 bash $ which python /opt/rh/rh-python36/root/usr/bin/python $ source ~/pydev/myproject1/bin/activate (myproject1) $ which python ~/pydev/myproject1/bin/python &lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Avoid Python wrapper scripts such as &lt;code&gt;virtualenv&lt;/code&gt;: Use the module name&lt;/h3&gt; &lt;p&gt;Some Python utilities are put in your path as a wrapper script in a &lt;code&gt;.../bin&lt;/code&gt; directory. This is convenient because you can just type &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;virtualenv.&lt;/code&gt; Most Python utilities are actually just Python modules with wrapper scripts to start Python and run the code in the module.&lt;/p&gt; &lt;p&gt;The problem with wrapper scripts is the same ambiguity that happens when typing &lt;code&gt;python&lt;/code&gt;. Which version of &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt; you will get when you type the command without a version number? For things to work correctly, there is the additional complication that the utility needs to match the version of Python you intend to be using. Some subtle (hard to diagnose) problems can occur if you wind up unintentionally mixing versions.&lt;/p&gt; &lt;p&gt;Note: There are several directories that wrapper scripts can reside in. Which version you get is dependent on your path, which changes when you enable software collections and/or activate virtual environments. Modules installed with &lt;code&gt;pip --user&lt;/code&gt; put their wrapper scripts in &lt;code&gt;~/.local/bin&lt;/code&gt;, which can get obscured by activating the software collection or a virtual environment.&lt;/p&gt; &lt;p&gt;You can avoid the surprises from the path issues by running the module directly from a specific version of Python by using &lt;code&gt;-m &lt;/code&gt;modulename. While this involves more typing, it is a much safer approach.&lt;/p&gt; &lt;p&gt;Recommendations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Instead of &lt;code&gt;pip&lt;/code&gt;, use &lt;code&gt;python3.6 -m pip&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Instead of &lt;code&gt;pyvenv&lt;/code&gt;, use &lt;code&gt;python3.6 -m venv&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Instead of &lt;code&gt;virtualenv&lt;/code&gt;, use &lt;code&gt;python3.6 -m virtualenv&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;Do not run &lt;code&gt;pip install&lt;/code&gt; as root (or with &lt;code&gt;sudo&lt;/code&gt;)&lt;/h3&gt; &lt;p&gt;Running &lt;code&gt;pip install&lt;/code&gt; as root either directly or by using &lt;code&gt;sudo&lt;/code&gt; is a bad idea and &lt;strong&gt;will cause you problems&lt;/strong&gt; at some point. Some of the problems that you may encounter are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Conflicts between the RPM packages and &lt;code&gt;pip&lt;/code&gt; installed packages. The conflicts will most likely show up when you need to install a fixed or upgraded package or module. The install might fail or, worse, you may wind up with a broken installation. It&amp;#8217;s best to let &lt;code&gt;yum&lt;/code&gt; be the exclusive manager of the files in the system directories.&lt;/li&gt; &lt;li&gt;Runtime environments that can&amp;#8217;t be easily reproduced. It can be difficult to determine which modules were installed via an RPM package or via &lt;code&gt;pip&lt;/code&gt;. When you want to run your Python code on another system, what needs to be installed? Does it need to be installed system-wide? Will you get the same version of the modules you tested your code under?&lt;/li&gt; &lt;li&gt;Upgrading modules to solve one dependency can break some other code. Unfortunately, there are many cases where code needs a specific version of a module and newer versions might be incompatible. Running &lt;code&gt;pip install&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt; means all modules get installed in a system-wide directory, making it hard to determine which modules were installed for a specific application.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using virtual environments will allow you to isolate the modules you install for each project from the modules that are part of the Python installation from Red Hat. Using virtual environments is considered a best practice to create isolated environments that provide the dependencies needed for a specific purpose. You don&amp;#8217;t need to use &lt;code&gt;--user&lt;/code&gt; when running &lt;code&gt;pip&lt;/code&gt; in a virtual environment since it will default to installing in the virtual environment, which you should have write access to.&lt;/p&gt; &lt;p&gt;If you aren&amp;#8217;t using virtual environments, or need a module/tool to be available outside of a virtual environments, use &lt;code&gt;pip --user&lt;/code&gt; to install modules under your home directory.&lt;/p&gt; &lt;p&gt;In case you think this is overly dire, see this &lt;a href="https://xkcd.com/1987/"&gt;xkcd comic&lt;/a&gt;. Don&amp;#8217;t forget to hover so you see the alt text.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Use virtual environments instead of &lt;code&gt;pip --user&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;Some guides recommend using &lt;code&gt;pip --user&lt;/code&gt;. While this is preferred over running &lt;code&gt;pip&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt;, using virtual environments is much better practice for properly isolating the modules you need for a given project or set of projects. &lt;code&gt;pip --user&lt;/code&gt; installs use &lt;code&gt;~/.local&lt;/code&gt;, which can be obscured by enabling software collections and/or activating virtual environments. For modules that install wrapper scripts in &lt;code&gt;~/.local/bin&lt;/code&gt;, this can cause a mismatch between the wrapper script and the module.&lt;/p&gt; &lt;p&gt;The exception to this advice is modules and tools that you need to use outside of virtual environments. The primary example is &lt;code&gt;pipenv&lt;/code&gt;. You should use &lt;code&gt;pip install --user pipenv&lt;/code&gt; to install &lt;code&gt;pipenv&lt;/code&gt;. That way, you&amp;#8217;ll have &lt;code&gt;pipenv&lt;/code&gt; in your path without any virtual environments.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Don&amp;#8217;t use the system Python for your own projects&lt;/h3&gt; &lt;p&gt;The Python version installed in &lt;code&gt;/usr/bin/python&lt;/code&gt; and &lt;code&gt;/usr/bin/python2&lt;/code&gt; is part of the operating system. RHEL was tested with a specific Python release (2.7.5) that will be maintained for the full ten-year supported life of the OS. Many of the built-in administration tools are actually written in Python. Trying to change the version of Python in &lt;code&gt;/usr/bin&lt;/code&gt; might actually break some of the OS functionality.&lt;/p&gt; &lt;p&gt;At some point, you might want to run your code on a different version of the OS. That OS will likely have a different version of Python installed as &lt;code&gt;/usr/bin/python&lt;/code&gt;, &lt;code&gt;/usr/bin/python2&lt;/code&gt;, or even &lt;code&gt;/usr/bin/python3&lt;/code&gt;. The code you write may have dependencies on a specific version that can be best managed through virtual environments and/or software collections.&lt;/p&gt; &lt;p&gt;The one exception to the above is if you are writing system administration tools. In that case, you should use the Python in &lt;code&gt;/usr/bin&lt;/code&gt; because it has the correct modules and libraries installed for the APIs in the OS. Note: If you are writing system administration or management tools in Python, you might want to take a look at Ansible. Ansible is written in Python, uses Jinja2 for templating, and provides higher-level abstractions for many system tasks.&lt;/p&gt; &lt;p&gt;Tip: If you need to work with Python 2.7, install the &lt;code&gt;python27&lt;/code&gt; software collection. Follow the installation steps above but use &lt;code&gt;python27&lt;/code&gt; instead of &lt;code&gt;rh-python36&lt;/code&gt;. You can enable both collections at the same time, so you&amp;#8217;ll have both the newer &lt;code&gt;python2.7&lt;/code&gt; and &lt;code&gt;python3.6&lt;/code&gt; in your path. Note: the collection you enable last is the one that will be first in your path, which determines the version you get when you type a command like &lt;code&gt;python&lt;/code&gt; or &lt;code&gt;pip&lt;/code&gt; without an explicit version number.&lt;/p&gt; &lt;h3&gt;Don&amp;#8217;t change or overwrite &lt;code&gt;/usr/bin/python&lt;/code&gt;, &lt;code&gt;/usr/bin/python2&lt;/code&gt;, or &lt;code&gt;/usr/bin/python2.7&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;As mentioned above, the system Python is part of Red Hat Enterprise Linux 7 and is used by critical system utilities such as &lt;code&gt;yum&lt;/code&gt;. (Yes, yum is written in Python.) So overwriting the system Python is likely to break your system—badly. If you try to compile Python from source, do not do a &lt;code&gt;make install&lt;/code&gt; (as root) without using a different prefix or it will overwrite &lt;code&gt;/usr/bin/python&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;&lt;a id="scl-tips"&gt;&lt;/a&gt;Software collection tips&lt;/h2&gt; &lt;h3&gt;&lt;a id="scl-first"&gt;&lt;/a&gt;Enable the Python collection *before* the virtual environment&lt;/h3&gt; &lt;p&gt;You should always enable the Python software collection &lt;strong&gt;before using any of Python virtual environment&lt;/strong&gt; utilities to create or activate an environment. In order for things to work correctly, you need to have your desired version of Python in your path because it will be needed by the Python virtual environment. A number of problems, some of which are subtle, come up if you try to enable/activate in the wrong order.&lt;code&gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Example for &lt;code&gt;venv&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ python3.6 -m venv myproject1 $ source myproject1/bin/activate &lt;/pre&gt; &lt;p&gt;When reactivating later in a new shell:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ source myproject1/bin/activate &lt;/pre&gt; &lt;p&gt;Example for &lt;code&gt;virtualenv&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ python3.6 -m virtualenv myproject1 $ source myproject1/bin/activate &lt;/pre&gt; &lt;p&gt;When reactivating later in a new shell:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ scl enable rh-python36 bash $ source myproject1/bin/activate &lt;/pre&gt; &lt;h3&gt;&lt;a id="scl-permanent"&gt;&lt;/a&gt;How to permanently enable a software collection&lt;/h3&gt; &lt;p&gt;To permanently add Python 3 to your path(s), you can add an &lt;code&gt;scl_source&lt;/code&gt; command to the &amp;#8220;dot files&amp;#8221; for your specific user ID. The benefit of this approach is that the collection is already enabled at every login. If you are using a graphical desktop, everything that you start from the menu will already have the collection enabled.&lt;/p&gt; &lt;p&gt;There are a few caveats with this approach:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;When you type &lt;code&gt;python&lt;/code&gt; with no version number, &lt;strong&gt;you will get Python 3 instead of Python 2&lt;/strong&gt;. You can still get Python 2 by typing &lt;code&gt;python2&lt;/code&gt; or &lt;code&gt;python2.7&lt;/code&gt;. Using an explicit version number is strongly recommended.&lt;/li&gt; &lt;li&gt;The above applies to other Python commands that are in &lt;code&gt;.../bin&lt;/code&gt; such as &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pydoc&lt;/code&gt;, &lt;code&gt;python-config&lt;/code&gt;, &lt;code&gt;pyvenv&lt;/code&gt;, and &lt;code&gt;virtualenv&lt;/code&gt;. Use a version number to avoid surprises.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;There is no&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;scl disable&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;command&lt;/strong&gt;. Everything is in environment variables, so you can work around it, but it would be a manual process. You can, however, enable a different software collection that will then take precedence over the collection in your profile.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using your preferred text editor, add the following line to your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # Add RHSCL Python 3 to my login environment source scl_source enable rh-python36 &lt;/pre&gt; &lt;p&gt;Note: you could also add the &lt;code&gt;scl_source&lt;/code&gt; line to the start of a build script to select the desired Python for the build. If your build script isn&amp;#8217;t written as a shell/bash script, you could just wrap it in a shell script that has the source &lt;code&gt;scl_source&lt;/code&gt; command and then runs your build script.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;&lt;a id="scl-script"&gt;&lt;/a&gt;How to use Python 3 from RHSCL in the #! (shebang) line of a script&lt;/h3&gt; &lt;p&gt;You can create a script that will use Python from the software collection without a requirement for &lt;code&gt;scl enable&lt;/code&gt; to be manually run first. This can be done by using &lt;code&gt;/usr/bin/scl enable&lt;/code&gt; as the interpreter for the script:&lt;/p&gt; &lt;pre class="brush: python; title: ; notranslate"&gt; #!/usr/bin/scl enable rh-python36 -- python3 import sys version = &amp;#34;Python %d.%d&amp;#34; % (sys.version_info.major, sys.version_info.minor) print(&amp;#34;You are running Python&amp;#34;,version) &lt;/pre&gt; &lt;p&gt;Note: You may be tempted to try using just the full path to &lt;code&gt;.../root/usr/bin/python&lt;/code&gt; without the &lt;code&gt;scl enable&lt;/code&gt;. In many cases, this won&amp;#8217;t work. The behavior is dependent on the specific software collection. For most collections, this will fail with a shared library error, since &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; isn&amp;#8217;t set correctly. The &lt;code&gt;python27&lt;/code&gt; collection doesn&amp;#8217;t give an error, but it finds the wrong shared library, so you get the wrong version of Python, which can be surprising. However, &lt;code&gt;rh-python36&lt;/code&gt; can be referenced directly without setting &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, but it is currently the only Python collection that works that way. There is no guarantee that future collections will work the same way.&lt;/p&gt; &lt;h3&gt;&lt;a id="which-scl-installed"&gt;&lt;/a&gt;How to see which software collections are installed&lt;/h3&gt; &lt;p&gt;You can use the command &lt;code&gt;scl -l&lt;/code&gt; to see what software collections are installed. This will show all software collections that are installed, whether they are enabled or not.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ scl -l python27 rh-python36 &lt;/pre&gt; &lt;h3&gt;&lt;a id="which-scl-enabled"&gt;&lt;/a&gt;How to tell which software collections are enabled&lt;/h3&gt; &lt;p&gt;The environment variable &lt;code&gt;X_SCLS&lt;/code&gt; contains a list of the software collections that are currently enabled.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ echo $X_SCLS $ for scl in $X_SCLS; do echo $scl; done rh-python36 python27 &lt;/pre&gt; &lt;p&gt;In scripts, you can use &lt;code&gt;scl_enabled &lt;em&gt;collection-name&lt;/em&gt;&lt;/code&gt; to test if a specific collection is enabled.&lt;/p&gt; &lt;h3&gt;How can I find a list of Red Hat Software Collections and how long they are supported?&lt;/h3&gt; &lt;p&gt;See &lt;a href="https://access.redhat.com/support/policy/updates/rhscl"&gt;Red Hat Software Collections Product Life Cycle&lt;/a&gt; on the Red Hat Customer Portal. It has a list of Red Hat Software Collections packages and support information.&lt;/p&gt; &lt;p&gt;You can also check the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/"&gt;release notes&lt;/a&gt; for the most recent release of Red Hat Software Collections.&lt;/p&gt; &lt;h3&gt;Find additional RPM packages and see other available versions&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;yum search&lt;/code&gt; to search for additional packages and see the other versions that are available:&lt;/p&gt; &lt;p&gt;To search for other packages that are part of the &lt;code&gt;rh-python36&lt;/code&gt; collection:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # yum search rh-python36 &lt;/pre&gt; &lt;p&gt;Starting with the Python 3.4 collection, the collection and package names are all prefixed with &lt;code&gt;rh-&lt;/code&gt;. So you can use the following command to see all of the &lt;code&gt;rh-python&lt;/code&gt; packages and, therefore, see what collections are available.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # yum search rh-python &lt;/pre&gt; &lt;p&gt;Note: to see the available packages in the Python 2.7 collection, search for &lt;code&gt;python27&lt;/code&gt;.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; # yum search python27 &lt;/pre&gt; &lt;p&gt;You can, of course, just search for &lt;code&gt;python&lt;/code&gt; and get a list of every available RPM that has &lt;code&gt;python&lt;/code&gt; in the name or description. It will be a very long list, so it&amp;#8217;s best to redirect the output to a file and use &lt;code&gt;grep&lt;/code&gt; or a text editor to search the file. The packages that start with &lt;code&gt;python-&lt;/code&gt; (without a version number) are part of the base RHEL Python 2.7.5 packages that are installed in &lt;code&gt;/usr/bin&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;&lt;a id="troubleshooting"&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt; &lt;h3&gt;Python: error while loading shared libraries&lt;/h3&gt; &lt;p&gt;This error occurs when you are trying to run a binary but the shared libraries it depends on can&amp;#8217;t be found. Typically this occurs when trying to run &lt;code&gt;python&lt;/code&gt; from a software collection without enabling it first. In addition to setting &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;scl enable&lt;/code&gt; also sets &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;. This adds the directory containing the software collection&amp;#8217;s shared objects to the library search path.&lt;/p&gt; &lt;p&gt;To see what environment variables are modified, take a look at &lt;code&gt;/opt/rh/rh-python/enable&lt;/code&gt;.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ cat /opt/rh/rh-python36/enable export PATH=/opt/rh/rh-python36/root/usr/bin${PATH:+:${PATH}} export LD_LIBRARY_PATH=/opt/rh/rh-python36/root/usr/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}} export MANPATH=/opt/rh/rh-python36/root/usr/share/man:$MANPATH export PKG_CONFIG_PATH=/opt/rh/rh-python36/root/usr/lib64/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}} export XDG_DATA_DIRS=&amp;#34;/opt/rh/rh-python36/root/usr/share:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}&amp;#34; &lt;/pre&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;Wrong version of Python when running &lt;code&gt;python&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;First, running &lt;code&gt;python&lt;/code&gt; with no version number is likely to give you an unexpected version of Python at some point. The result is dependent on your &lt;code&gt;PATH&lt;/code&gt;, which depends on whether you&amp;#8217;ve enabled the software collection and/or activated the virtual environment. If you use a version number such as &lt;code&gt;python3.6&lt;/code&gt; and you haven&amp;#8217;t enabled/activated the right environment, you&amp;#8217;ll get a clean and easy-to-understand “command not found” error.&lt;/p&gt; &lt;p&gt;Second, you can also get the wrong version if you&amp;#8217;ve &lt;strong&gt;forgotten to enable the software collection&lt;/strong&gt;. Enabling the software collection puts the collection&amp;#8217;s &lt;code&gt;/bin&lt;/code&gt; directory in your path first, so it will hide all of the other versions of commands with the same name.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;The software collection needs to be enabled even if you give the full path to the &lt;code&gt;python&lt;/code&gt; binary&lt;/strong&gt;. For most of the collections, you&amp;#8217;ll get a shared library error (see above) without the library path being set correctly. However, if you try this with the &lt;code&gt;python27&lt;/code&gt; collection, you&amp;#8217;ll get Python 2.7.5 (the default version) instead of Python 2.7.13 as you&amp;#8217;d expect. This is because the shared library dependency is satisfied out of &lt;code&gt;/lib&lt;/code&gt; instead of from the software collection, so you pick up the system Python.&lt;/p&gt; &lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;Error running &lt;code&gt;pip&lt;/code&gt;: ImportError cannot import name &amp;#8216;main&amp;#8217;&lt;/h3&gt; &lt;p&gt;If you run &lt;code&gt;pip upgrade --user pip&lt;/code&gt;, as some guides suggest, the &lt;code&gt;pip&lt;/code&gt; command will no longer work. The problem is a path issue combined with an incompatibility between versions. The user installation of &lt;code&gt;pip&lt;/code&gt; placed a new &lt;code&gt;pip&lt;/code&gt; command in &lt;code&gt;~/.local/bin&lt;/code&gt;. However, &lt;code&gt;~/.local/bin&lt;/code&gt; is in your path *after* the software collection. So you get the older wrapper script that is incompatible with the newer module.&lt;/p&gt; &lt;p&gt;This can be worked around in several ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Use virtual environments. Once you create or activate a virtual environment, you&amp;#8217;ll get the correct &lt;code&gt;pip&lt;/code&gt; wrapper script in the &lt;code&gt;.../bin&lt;/code&gt; directory of the virtual environment.&lt;/li&gt; &lt;li&gt;Run &lt;code&gt;pip&lt;/code&gt; as a module: &lt;code&gt;python3.6 -m pip install ...&lt;/code&gt; (See &amp;#8220;Avoid Python wrapper scripts&amp;#8221; above.)&lt;/li&gt; &lt;li&gt;Don&amp;#8217;t upgrade &lt;code&gt;pip&lt;/code&gt; outside of virtual environments.&lt;/li&gt; &lt;li&gt;Use the full path to the &lt;code&gt;pip&lt;/code&gt; wrapper script: &lt;code&gt;~/.local/bin/pip3.6&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Add &lt;code&gt;~/.local/bin&lt;/code&gt; as the first directory in your &lt;code&gt;PATH&lt;/code&gt; after enabling the Python software collection.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note: To uninstall the upgraded &lt;code&gt;pip&lt;/code&gt; that was installed in &lt;code&gt;~/.local&lt;/code&gt;, run the following command under your regular user ID (not &lt;code&gt;root&lt;/code&gt;):&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ python3.6 -m pip uninstall pip &lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Can&amp;#8217;t find &lt;code&gt;virtualenv3.6&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;rh-python36&lt;/code&gt; software collection includes the &lt;code&gt;virtualenv&lt;/code&gt; wrapper script but does not have a link for &lt;code&gt;virtualenv3.6&lt;/code&gt;. There are two workarounds for this, but first I should point out that &lt;code&gt;venv&lt;/code&gt; is now the Python 3 preferred tool for virtual environments.&lt;/p&gt; &lt;p&gt;The preferred workaround is to avoid the wrapper script entirely and invoke the module directly:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ python3.6 -m virtualenv myproject1 &lt;/pre&gt; &lt;p&gt;Alternatively, you could create your own symlink in your &lt;code&gt;~/bin&lt;/code&gt; directory:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; $ ln -s /opt/rh/rh-python36/root/usr/bin/virtualenv ~/bin/virtualenv3.6 &lt;/pre&gt; &lt;h2&gt;&lt;/h2&gt; &lt;hr /&gt; &lt;h2&gt;&lt;a id="more-info"&gt;&lt;/a&gt;More information: Developing in Python on Red Hat Platforms&lt;/h2&gt; &lt;p&gt;Nick Coghlan and Graham Dumpleton gave a talk &lt;em&gt;&lt;a href="https://developers.redhat.com/videos/youtube/tLTSQiVQ8qk/"&gt;Developing in Python on Red Hat Platforms&lt;/a&gt;&lt;/em&gt; at DevNation 2016. The talk is chock full of information and still very relevant. They include information on building Python applications using containers, using s2i, and deploying to Red Hat OpenShift. I recommend watching the video or at least &lt;a href="https://www.slideshare.net/ncoghlan_dev/developing-in-python-on-red-hat-platforms-devnation-2016"&gt;reviewing the slides&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/tLTSQiVQ8qk?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;&lt;/h2&gt; &lt;h2&gt;&lt;/h2&gt; &lt;hr /&gt; &lt;h2&gt;&lt;a id="summary"&gt;&lt;/a&gt;Summary&lt;/h2&gt; &lt;p&gt;After reading this article you&amp;#8217;ve learned:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How to install Python 3 and other versions of Python that are supported by Red Hat using Red Hat Software Collections on Red Hat Enterprise Linux&lt;/li&gt; &lt;li&gt;Python virtual environments are a best practice for installing Python modules while isolating dependencies in order to avoid conflicts. You can create and activate virtual environments with &lt;code&gt;venv&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt;. Both tools will be installed for you as part of the software collection.&lt;/li&gt; &lt;li&gt;About &lt;code&gt;pipenv&lt;/code&gt;, a tool that is similar to &lt;code&gt;npm&lt;/code&gt;, which is recommended by the Python Packaging Guide for managing application dependencies, especially on shared projects. Pipenv provides one command that integrates both &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Things to avoid such as: &lt;ul&gt; &lt;li&gt;Running &lt;code&gt;pip install&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt; to avoid conflicts with the RPM packages installed by &lt;code&gt;yum&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Typing &lt;code&gt;python&lt;/code&gt; without a version number to avoid ambiguity about which version will be run and surprises that might result from that&lt;/li&gt; &lt;li&gt;Modifying /usr/bin/python since many system management tools such as &lt;code&gt;yum&lt;/code&gt; depend on it and might break&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Tips for working with Red Hat Software Collections &lt;ul&gt; &lt;li&gt;Always enable the Python software collection &lt;strong&gt;before&lt;/strong&gt; using virtual environments&lt;/li&gt; &lt;li&gt;How to permanently enable a software collection, so you&amp;#8217;ll always have python3 in your path&lt;/li&gt; &lt;li&gt;How to use Python 3 from RHSCL in the #! (shebang) line of a script&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;How to troubleshoot common problems such as &lt;ul&gt; &lt;li&gt;Python: error while loading shared libraries&lt;/li&gt; &lt;li&gt;&lt;code&gt;pip upgrade&lt;/code&gt; breaks pip with: ImportError cannot import name &amp;#8216;main&amp;#8217;&lt;/li&gt; &lt;li&gt;Wrong version of Python when typing &lt;code&gt;python&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;linkname=How%20to%20install%20Python%203%20on%20RHEL" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F13%2Finstall-python3-rhel%2F&amp;#38;title=How%20to%20install%20Python%203%20on%20RHEL" data-a2a-url="https://developers.redhat.com/blog/2018/08/13/install-python3-rhel/" data-a2a-title="How to install Python 3 on RHEL"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/13/install-python3-rhel/"&gt;How to install Python 3 on RHEL&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xp5SwaTg8-8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article shows how to install Python 3, pip, venv, virtualenv, and pipenv on Red Hat Enterprise Linux 7. After following the steps in this article, you should be in a good position to follow many Python guides and tutorials using RHEL. Using Python virtual environments is a best practice to isolate project-specific dependencies and [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/13/install-python3-rhel/"&gt;How to install Python 3 on RHEL&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/08/13/install-python3-rhel/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">1</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">512967</post-id><dc:creator>Rob Terzi</dc:creator><dc:date>2018-08-13T11:00:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/13/install-python3-rhel/</feedburner:origLink></entry><entry><title>Node.js client 0.5.0 released with improved stability and better OSX integration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0pN_IvYVds0/nodejs-client-050-with-improved.html" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="js-client" scheme="searchisko:content:tags" /><category term="Mac" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Galder Zamarreño</name></author><id>searchisko:content:id:jbossorg_blog-node_js_client_0_5_0_released_with_improved_stability_and_better_osx_integration</id><updated>2018-08-13T07:47:29Z</updated><published>2018-08-13T07:44:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Infinispan Node.js client &lt;a href="https://www.npmjs.com/package/infinispan"&gt;0.5.0&lt;/a&gt; was released last week. It comes with much improved stability under heavy load conditions and hence it's a recommended upgrade for any current users.&lt;br /&gt;&lt;br /&gt;On top of that, a configuration option called&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;topologyUpdates&lt;/span&gt; (&lt;b&gt;true (default)&amp;nbsp;&lt;/b&gt;/ false) has been added to disable topology updates. This can be useful when trying to access Infinispan server running within a Docker container on MacOs. Without this option to disable topology updates, Node.js client receives internal Docker IP addresses on first contact which cannot be accessed from outside Docker on MacOs. See &lt;a href="https://blog.infinispan.org/2018/03/accessing-infinispan-inside-docker-for.html"&gt;this previous blog post&lt;/a&gt; for more details.&lt;br /&gt;&lt;br /&gt;If you're a Node.js user and want to store data remotely in Infinispan server instances, please give the client a go and tell us what you think of it via our &lt;a href="https://developer.jboss.org/en/infinispan/content"&gt;forum&lt;/a&gt;, via our &lt;a href="https://issues.jboss.org/projects/HRJS"&gt;issue tracker&lt;/a&gt; or via &lt;a href="https://zulipchat.com/"&gt;Zulip&lt;/a&gt; on &lt;a href="https://infinispan.zulipchat.com/"&gt;Infinispan channel&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;Galder&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/I7v1xZwHeQo" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0pN_IvYVds0" height="1" width="1" alt=""/&gt;</content><summary>Infinispan Node.js client 0.5.0 was released last week. It comes with much improved stability under heavy load conditions and hence it's a recommended upgrade for any current users. On top of that, a configuration option called topologyUpdates (true (default) / false) has been added to disable topology updates. This can be useful when trying to access Infinispan server running within a Docker cont...</summary><dc:creator>Galder Zamarreño</dc:creator><dc:date>2018-08-13T07:44:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/I7v1xZwHeQo/nodejs-client-050-with-improved.html</feedburner:origLink></entry><entry><title>Develop Batch Applications with Red Hat Developer Studio</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nVUTC-AJksA/develop-batch-applications-with-red-hat-developer-studio" /><category term="feed_group_name_jberet" scheme="searchisko:content:tags" /><category term="feed_name_jberet" scheme="searchisko:content:tags" /><author><name>Cheng Fang</name></author><id>searchisko:content:id:jbossorg_blog-develop_batch_applications_with_red_hat_developer_studio</id><updated>2018-08-14T02:05:20Z</updated><published>2018-08-13T03:43:01Z</published><content type="html">&lt;!-- [DocumentBodyStart:b0f17f8a-4f6b-4d88-869a-76cd096c3efb] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/products/devstudio/overview/" rel="nofollow"&gt;Red Hat Developer Studio&lt;/a&gt; is a comprehensive IDE for developing a wide range of enterprise applications, including Java applications for batch processing.&amp;#160; In this post, I will write about how to develop a &lt;a class="jive-link-external-small" href="https://jcp.org/en/jsr/detail?id=352" rel="nofollow"&gt;standard-based&lt;/a&gt; batch application in Red Hat Developer Studio, using various &lt;a class="jive-link-external-small" href="https://github.com/jberet" rel="nofollow"&gt;JBeret&lt;/a&gt; libraries, and deployed to &lt;a class="jive-link-external-small" href="http://wildfly.org/" rel="nofollow"&gt;WildFly&lt;/a&gt; application server.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Import Sample Application&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;We will be using an existing batch sample application, &lt;a class="jive-link-external-small" href="https://github.com/jberet/numbers-chunk.git" rel="nofollow"&gt;numbers-chunk&lt;/a&gt;&lt;span&gt;, as the base project to save us the initial setup work.&amp;#160; First, we need to import it into the&amp;#160; studio with the Eclipse project import wizard (&lt;strong&gt;File &lt;/strong&gt;&amp;gt;&lt;strong&gt; Import&lt;/strong&gt;, and then choose &lt;strong&gt;Maven &lt;/strong&gt;&amp;gt;&lt;strong&gt; Check out Maven Projects from SCM&lt;/strong&gt;, and then enter its git repo URL: &lt;/span&gt;&lt;a class="jive-link-external-small" href="https://github.com/jberet/numbers-chunk.git" rel="nofollow"&gt;https://github.com/jberet/numbers-chunk.git&lt;/a&gt;&lt;span&gt;).&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234384/import-project.png"&gt;&lt;img alt="" class="image-1 jive-image" height="614" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234384/import-project.png" style="width: 620px; height: 353px;" width="1078"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Now we have a fully functional Java EE batch application imported into the studio, which can be deployed and run in WildFly, or enhanced to add more jobs and processing steps. There is an existing job XML file, numbers.xml, which contains a chunk-type step reading an array of numbers and writing them out to the console.&amp;#160; We will define a new job similar to this and also adding an item processor to the step.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Implement Item Processor Class&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Create a new folder named "java" under src/main, if it does not already exist (&lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;New&lt;/strong&gt; &amp;gt; &lt;strong&gt;Folder&lt;/strong&gt;).&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Create the java package structure, org.jberet.samples.wildfly.numberschunk, under src/main/java directory.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Create the item processor class by following the command sequence &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;New&lt;/strong&gt; &amp;gt; &lt;strong&gt;Other&lt;/strong&gt; (or &lt;strong&gt;Command + N&lt;/strong&gt;, or &lt;strong&gt;Ctrl + N&lt;/strong&gt;) to bring up the wizard:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234386/new-batch-artifact.png"&gt;&lt;img alt="" class="image-2 jive-image" height="899" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234386/964-899/new-batch-artifact.png" style="width: 620px; height: 578px;" width="964"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234387/new-processor.png"&gt;&lt;img alt="" class="image-3 jive-image" height="900" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234387/888-900/new-processor.png" style="width: 620px; height: 628px;" width="888"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;In the above wizard, specify the item processor class name: NumberProcessor, and add a property named multiple.&amp;#160; After clicking &lt;strong&gt;Finish&lt;/strong&gt;, a skeleton class is generated.&amp;#160; And we just need to change the body of its processItem method to multiply the item number by the multiple property:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:2e00c36f-8f9b-4ca4-9502-e2c2660877f0][excluded]--&gt;&lt;pre class="java" name="code"&gt;package org.jberet.samples.wildfly.numberschunk; import javax.batch.api.BatchProperty; import javax.batch.api.chunk.ItemProcessor; import javax.inject.Inject; import javax.inject.Named; @Named public class NumberProcessor implements ItemProcessor { &amp;#160;&amp;#160;&amp;#160; @Inject &amp;#160;&amp;#160;&amp;#160; @BatchProperty &amp;#160;&amp;#160;&amp;#160; protected int multiple; &amp;#160;&amp;#160;&amp;#160; @Override &amp;#160;&amp;#160;&amp;#160; public Object processItem(Object item) throws Exception { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return ((Integer) item) * multiple; &amp;#160;&amp;#160;&amp;#160; } }&lt;/pre&gt;&lt;!--[CodeBlockEnd:2e00c36f-8f9b-4ca4-9502-e2c2660877f0]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Using the above batch artifact wizard, you can create all types of batch artifacts:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Batchlet&lt;/li&gt;&lt;li&gt;Decider&lt;/li&gt;&lt;li&gt;Item Reader&lt;/li&gt;&lt;li&gt;Item Writer&lt;/li&gt;&lt;li&gt;Item Processor&lt;/li&gt;&lt;li&gt;Checkpoint Algorithm&lt;/li&gt;&lt;li&gt;Partition Mapper&lt;/li&gt;&lt;li&gt;Partition Reducer&lt;/li&gt;&lt;li&gt;Partition Collector&lt;/li&gt;&lt;li&gt;Partition Analyzer&lt;/li&gt;&lt;li&gt;Job Listener&lt;/li&gt;&lt;li&gt;Step Listener&lt;/li&gt;&lt;li&gt;Chunk Listener&lt;/li&gt;&lt;li&gt;Item Reader Listener&lt;/li&gt;&lt;li&gt;Item Process Listener&lt;/li&gt;&lt;li&gt;Item Write Listener&lt;/li&gt;&lt;li&gt;Skip Read Listener&lt;/li&gt;&lt;li&gt;Skip Process Listener&lt;/li&gt;&lt;li&gt;Skip Write Listener&lt;/li&gt;&lt;li&gt;Retry Read Listener&lt;/li&gt;&lt;li&gt;Retry Process Listener&lt;/li&gt;&lt;li&gt;Retry Write Listener&lt;/li&gt;&lt;/ol&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Design Batch Job XML&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Next, let's see how the studio makes it easy to design batch job flows.&amp;#160; Choose menu &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;New&lt;/strong&gt; &amp;gt; &lt;strong&gt;Other&lt;/strong&gt; (&lt;strong&gt;Command + N&lt;/strong&gt; or &lt;strong&gt;Ctrl + N&lt;/strong&gt;) to start the batch job XML wizard:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234812/new-batch.png"&gt;&lt;img alt="" class="image-4 jive-image" height="899" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234812/966-899/new-batch.png" style="width: 620px; height: 577px;" width="966"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;In the next screen, enter the file name for the job XML: job1.xml.&amp;#160; Notice that the job id field is automatically updated to the same value without the .xml extension.&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234813/new-job-xml.png"&gt;&lt;img alt="" class="image-5 jive-image" height="900" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234813/1013-900/new-job-xml.png" style="width: 620px; height: 550px;" width="1013"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Define and Configure Step&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;After clicking &lt;strong&gt;Finish&lt;/strong&gt;, the job XML skeleton is generated at the correct location, numbers-chunk/src/main/resources/META-INF/batch-jobs.&amp;#160; In the studio editor, the job XML is displayed in 3 views: Design, Diagram and Source.&amp;#160; You can modify the job definition in any of the 3 views and all changes will be synchronized.&amp;#160; Next, let's add a step, step1, to the job in the Design view:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234814/design-new-step.png"&gt;&lt;img alt="" class="image-6 jive-image" height="899" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234814/1244-899/design-new-step.png" style="width: 620px; height: 448px;" width="1244"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In the step details panel, add step configuration information, including id and next attribute, transition elements (fail, end, stop and next) and step properties.&amp;#160; Note that only one of next attribute or next transition element can be specified for transition, but not both.&amp;#160; You can enter the name and value for any number of step properties in this page.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234815/step-transitions.png"&gt;&lt;img alt="" class="image-7 jive-image" height="900" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234815/1010-900/step-transitions.png" style="width: 620px; height: 552px;" width="1010"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Configure Chunk&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Since we want step1 to be a chunk step, we need to add a chunk element to step1.&amp;#160; Right-click step1 on the left panel, and choose &lt;strong&gt;Add&lt;/strong&gt; &amp;gt; &lt;strong&gt;Chunk&lt;/strong&gt; in the context menu, and fill chunk attributes on the right panel.&amp;#160; These are all optional configurations and their default values should suffice in many cases.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234816/step-chunk-config.png"&gt;&lt;img alt="" class="image-8 jive-image" height="900" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234816/1157-900/step-chunk-config.png" style="width: 620px; height: 482px;" width="1157"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We will use the NumberProcess class we created earlier as the item processor.&amp;#160; The Processor Ref field supports code-completion: press &lt;strong&gt;Ctrl-Space&lt;/strong&gt; while the focus is in this field to display all item processors available in the application.&amp;#160; Alternatively, you can click the &lt;strong&gt;browse&lt;/strong&gt; button to the right of the input field to select artifact from all available choices.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234817/chunk-processor.png"&gt;&lt;img alt="" class="image-9 jive-image" height="768" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234817/chunk-processor.png" style="width: 620px; height: 443px;" width="1076"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Configure Item Reader and Writer&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;A chunk-type step is required to contain an item reader and writer.&amp;#160; Expand the &lt;strong&gt;Chunk&lt;/strong&gt; node in the left panel, you will see reader, writer and processor subelements.&amp;#160; Click &lt;strong&gt;Reader&lt;/strong&gt; element and you will be able to configure the reader in the right panel.&amp;#160; Choose arrayItemReader as the reader ref among all available readers, which come from jberet-support library configured as project dependency.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Specify 2 properties for arrayItemReader:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;resource: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]&lt;/li&gt;&lt;li&gt;beanType: java.lang.Integer&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234926/reader-choose.png"&gt;&lt;img alt="" class="image-10 jive-image" height="899" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234926/1313-899/reader-choose.png" style="width: 620px; height: 425px;" width="1313"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Item writer can be configured similarly by choosing mockItemWriter from all available writers.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234927/writer-choose.png"&gt;&lt;img alt="" class="image-11 jive-image" height="860" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234927/writer-choose.png" style="width: 620px; height: 379px;" width="1406"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Build, Publish and Run Batch Application&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;After saving the project, we are ready to build the application.&amp;#160; If &lt;strong&gt;Project&lt;/strong&gt; &amp;gt; &lt;strong&gt;Build Automatically&lt;/strong&gt; is checked, then the project has already been built; otherwise, choose &lt;strong&gt;Project&lt;/strong&gt; &amp;gt; &lt;strong&gt;Build&lt;/strong&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To start WildFly from within the studio, go to Servers view, right-click &lt;strong&gt;WildFly&lt;/strong&gt; element and choose &lt;strong&gt;Start&lt;/strong&gt; from the context menu.&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234928/wildfly.png"&gt;&lt;img alt="" class="image-12 jive-image" height="498" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234928/wildfly.png" style="width: 620px; height: 215px;" width="1436"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;To publish numbers-chunk application to WildFly, select numbers-chunk project in Project Explorer, then choose&amp;#160; menu &lt;strong&gt;Run&lt;/strong&gt; &amp;gt; &lt;strong&gt;Run As&lt;/strong&gt; &amp;gt; &lt;strong&gt;Run on Server&lt;/strong&gt;.&amp;#160; After the application is successfully published onto WildFly, the studio will display the application welcome page:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6219-234929/welcome-page.png"&gt;&lt;img alt="" class="image-13 jive-image" height="312" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6219-234929/welcome-page.png" style="width: 620px; height: 134px;" width="1448"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Perform Batch Processing Operations&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Now that our batch application is up and running, we are ready to perform some common batch processing tasks via REST calls.&amp;#160; You can issue curl commands in a terminal, or use other REST client tools.&amp;#160; To keep it simple, we will use curl commands to send REST requests and python to pretty-print JSON output.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To start job numbers.xml (the existing job from github remote repo):&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:7bd0e9ba-34b1-43ac-8e05-8807bf583911][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s -X POST -H 'Content-Type:application/json' http://localhost:8080/numbers-chunk/api/jobs/numbers/start | python -m json.tool { &amp;#160;&amp;#160;&amp;#160; "batchStatus": "STARTING", &amp;#160;&amp;#160;&amp;#160; "createTime": 1534112744022, &amp;#160;&amp;#160;&amp;#160; "endTime": null, &amp;#160;&amp;#160;&amp;#160; "executionId": 1, &amp;#160;&amp;#160;&amp;#160; "exitStatus": null, &amp;#160;&amp;#160;&amp;#160; "href": "http://localhost:8080/numbers-chunk/api/jobexecutions/1", &amp;#160;&amp;#160;&amp;#160; "jobInstanceId": 1, &amp;#160;&amp;#160;&amp;#160; "jobName": "numbers", &amp;#160;&amp;#160;&amp;#160; "jobParameters": null, &amp;#160;&amp;#160;&amp;#160; "lastUpdatedTime": 1534112744022, &amp;#160;&amp;#160;&amp;#160; "startTime": null }&lt;/pre&gt;&lt;!--[CodeBlockEnd:7bd0e9ba-34b1-43ac-8e05-8807bf583911]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To start job job1.xml (the new job we just created).&amp;#160; In the studio console window, notice that all numbers have been multiplied by 100 by the item processor.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:b2a95e1b-1661-44d1-a67f-cb0437d50fa0][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s -X POST -H 'Content-Type:application/json' http://localhost:8080/numbers-chunk/api/jobs/job1/start | python -m json.tool { &amp;#160;&amp;#160;&amp;#160; "batchStatus": "STARTING", &amp;#160;&amp;#160;&amp;#160; "createTime": 1534114529790, &amp;#160;&amp;#160;&amp;#160; "endTime": null, &amp;#160;&amp;#160;&amp;#160; "executionId": 2, &amp;#160;&amp;#160;&amp;#160; "exitStatus": null, &amp;#160;&amp;#160;&amp;#160; "href": "http://localhost:8080/numbers-chunk/api/jobexecutions/2", &amp;#160;&amp;#160;&amp;#160; "jobInstanceId": 2, &amp;#160;&amp;#160;&amp;#160; "jobName": "job1", &amp;#160;&amp;#160;&amp;#160; "jobParameters": null, &amp;#160;&amp;#160;&amp;#160; "lastUpdatedTime": 1534114529790, &amp;#160;&amp;#160;&amp;#160; "startTime": null }&lt;/pre&gt;&lt;!--[CodeBlockEnd:b2a95e1b-1661-44d1-a67f-cb0437d50fa0]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To check the status of job execution we just started above:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:b7a2487e-c7aa-46bf-9e71-2ed43b5a433b][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s http://localhost:8080/numbers-chunk/api/jobexecutions/2 | python -m json.tool { &amp;#160;&amp;#160;&amp;#160; "batchStatus": "COMPLETED", &amp;#160;&amp;#160;&amp;#160; "createTime": 1534114529790, &amp;#160;&amp;#160;&amp;#160; "endTime": 1534114529837, &amp;#160;&amp;#160;&amp;#160; "executionId": 2, &amp;#160;&amp;#160;&amp;#160; "exitStatus": "COMPLETED", &amp;#160;&amp;#160;&amp;#160; "href": "http://localhost:8080/numbers-chunk/api/jobexecutions/2", &amp;#160;&amp;#160;&amp;#160; "jobInstanceId": 2, &amp;#160;&amp;#160;&amp;#160; "jobName": "job1", &amp;#160;&amp;#160;&amp;#160; "jobParameters": null, &amp;#160;&amp;#160;&amp;#160; "lastUpdatedTime": 1534114529837, &amp;#160;&amp;#160;&amp;#160; "startTime": 1534114529807 }&lt;/pre&gt;&lt;!--[CodeBlockEnd:b7a2487e-c7aa-46bf-9e71-2ed43b5a433b]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To show step execution details of a job execution:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:0d91500f-36e3-42d7-b56c-988aeeac682d][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s http://localhost:8080/numbers-chunk/api/jobexecutions/1/stepexecutions | python -m json.tool [ &amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "batchStatus": "COMPLETED", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "endTime": 1534112744112, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "exitStatus": "COMPLETED", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "metrics": [ &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "FILTER_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 0 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "ROLLBACK_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 0 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "PROCESS_SKIP_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 0 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "READ_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 16 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "WRITE_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 16 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "WRITE_SKIP_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 0 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "READ_SKIP_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 0 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "type": "COMMIT_COUNT", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "value": 2 &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; } &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; ], &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "startTime": 1534112744046, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "stepExecutionId": 1, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "stepName": "simple.step1" &amp;#160;&amp;#160;&amp;#160; } ]&lt;/pre&gt;&lt;!--[CodeBlockEnd:0d91500f-36e3-42d7-b56c-988aeeac682d]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To schedule a job for later or repeated execution (the following command starts running job1 after 1 minute, and in every 60 minutes afterwards):&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:2921bebd-c735-4bcb-83e4-f6a04797a4cf][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s -X POST -H 'Content-Type:application/json' -d '{"jobName":"job1", "initialDelay":1, "interval":60}' http://localhost:8080/numbers-chunk/api/jobs/job1/schedule | python -m json.tool { &amp;#160;&amp;#160;&amp;#160; "createTime": 1534130379291, &amp;#160;&amp;#160;&amp;#160; "id": "2", &amp;#160;&amp;#160;&amp;#160; "jobExecutionIds": [], &amp;#160;&amp;#160;&amp;#160; "jobScheduleConfig": { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "afterDelay": 0, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "initialDelay": 1, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "interval": 60, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "jobExecutionId": 0, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "jobName": "job1", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "jobParameters": null, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "persistent": false, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "scheduleExpression": null &amp;#160;&amp;#160;&amp;#160; }, &amp;#160;&amp;#160;&amp;#160; "status": "SCHEDULED" }&lt;/pre&gt;&lt;!--[CodeBlockEnd:2921bebd-c735-4bcb-83e4-f6a04797a4cf]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/p&gt;&lt;p&gt;To cancel the above schedule:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:05d38476-cb13-4694-a923-d6f95540a6b2][excluded]--&gt;&lt;pre class="javascript" name="code"&gt;curl -s -X POST -H 'Content-Type:application/json' http://localhost:8080/numbers-chunk/api/schedules/1/cancel | python -m json.tool&lt;/pre&gt;&lt;!--[CodeBlockEnd:05d38476-cb13-4694-a923-d6f95540a6b2]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;In this post, we've explored various features in Red Hat Developer Studio in developing batch application, including using wizards for generating batch artifacts, visually designing batch job work flow, instant synchronization between job XML design view, diagram and source view, batch artifact ref name suggestions and completion, etc.&amp;#160; I hope these features will help you further improve productivity in developing batch applications.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:b0f17f8a-4f6b-4d88-869a-76cd096c3efb] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nVUTC-AJksA" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Developer Studio is a comprehensive IDE for developing a wide range of enterprise applications, including Java applications for batch processing.  In this post, I will write about how to develop a standard-based batch application in Red Hat Developer Studio, using various JBeret libraries, and deployed to WildFly application server.   Import Sample Application   We will be using an existin...</summary><dc:creator>Cheng Fang</dc:creator><dc:date>2018-08-13T03:43:01Z</dc:date><feedburner:origLink>https://developer.jboss.org/community/jberet/blog/2018/08/12/develop-batch-applications-with-red-hat-developer-studio</feedburner:origLink></entry></feed>
